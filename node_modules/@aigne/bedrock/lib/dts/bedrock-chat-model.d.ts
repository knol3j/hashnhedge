import { type AgentProcessResult, ChatModel, type ChatModelInput, type ChatModelOptions, type ChatModelOutput } from "@aigne/core";
import { type PromiseOrValue } from "@aigne/core/utils/type-utils.js";
import { BedrockRuntimeClient, type BedrockRuntimeClientConfig } from "@aws-sdk/client-bedrock-runtime";
import { z } from "zod";
/**
 * @hidden
 */
export declare function extractLastJsonObject(text: string): string | null;
export interface BedrockChatModelOptions {
    accessKeyId?: string;
    secretAccessKey?: string;
    region?: string;
    model?: string;
    modelOptions?: ChatModelOptions;
    clientOptions?: Partial<BedrockRuntimeClientConfig>;
}
/**
 * @hidden
 */
export declare const bedrockChatModelOptionsSchema: z.ZodObject<{
    region: z.ZodOptional<z.ZodString>;
    model: z.ZodOptional<z.ZodString>;
    modelOptions: z.ZodOptional<z.ZodObject<{
        model: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        frequencyPenalty: z.ZodOptional<z.ZodNumber>;
        presencePenalty: z.ZodOptional<z.ZodNumber>;
        parallelToolCalls: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        parallelToolCalls: boolean;
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
    }, {
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        parallelToolCalls?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    region?: string | undefined;
    model?: string | undefined;
    modelOptions?: {
        parallelToolCalls: boolean;
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
    } | undefined;
}, {
    region?: string | undefined;
    model?: string | undefined;
    modelOptions?: {
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        parallelToolCalls?: boolean | undefined;
    } | undefined;
}>;
export declare class BedrockChatModel extends ChatModel {
    options?: BedrockChatModelOptions | undefined;
    constructor(options?: BedrockChatModelOptions | undefined);
    /**
     * @hidden
     */
    protected _client?: BedrockRuntimeClient;
    get client(): BedrockRuntimeClient;
    get modelOptions(): ChatModelOptions | undefined;
    get credential(): {
        accessKeyId: string | undefined;
        secretAccessKey: string | undefined;
        region: string | undefined;
        apiKey: string | undefined;
        model: string;
    };
    /**
     * Process the input using Bedrock's chat model
     * @param input - The input to process
     * @returns The processed output from the model
     */
    process(input: ChatModelInput): PromiseOrValue<AgentProcessResult<ChatModelOutput>>;
    private _process;
    private extractResultFromStream;
    private requestStructuredOutput;
}
