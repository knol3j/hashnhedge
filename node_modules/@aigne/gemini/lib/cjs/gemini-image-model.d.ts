import { ImageModel, type ImageModelInput, type ImageModelOptions, type ImageModelOutput } from "@aigne/core";
import { type GenerateContentConfig, type GenerateImagesConfig, GoogleGenAI } from "@google/genai";
export interface GeminiImageModelInput extends ImageModelInput, GenerateImagesConfig, GenerateContentConfig {
}
export interface GeminiImageModelOutput extends ImageModelOutput {
}
export interface GeminiImageModelOptions extends ImageModelOptions<GeminiImageModelInput, GeminiImageModelOutput> {
    apiKey?: string;
    baseURL?: string;
    model?: string;
    modelOptions?: Omit<Partial<GeminiImageModelInput>, "model">;
    clientOptions?: Record<string, any>;
}
export declare class GeminiImageModel extends ImageModel<GeminiImageModelInput, GeminiImageModelOutput> {
    options?: GeminiImageModelOptions | undefined;
    constructor(options?: GeminiImageModelOptions | undefined);
    protected _client?: GoogleGenAI;
    protected apiKeyEnvName: string;
    get client(): GoogleGenAI;
    get credential(): {
        url: string | undefined;
        apiKey: string | undefined;
        model: string;
    };
    get modelOptions(): Omit<Partial<GeminiImageModelInput>, "model"> | undefined;
    /**
     * Process the input and generate a response
     * @param input The input to process
     * @returns The generated response
     */
    process(input: GeminiImageModelInput): Promise<ImageModelOutput>;
    private generateImageByImagenModel;
    private generateImageByGeminiModel;
}
