import { type AgentInvokeOptions, type AgentOptions, MemoryAgent, type MemoryAgentOptions, MemoryRecorder, type MemoryRecorderInput, type MemoryRecorderOutput, MemoryRetriever, type MemoryRetrieverInput, type MemoryRetrieverOutput } from "@aigne/core";
import { type DefaultMemoryStorageOptions } from "./default-memory-storage/index.js";
import { MemoryStorage } from "./storage.js";
export interface DefaultMemoryOptions extends Partial<MemoryAgentOptions>, Omit<DefaultMemoryRecorderOptions, "storage" | keyof AgentOptions>, Omit<DefaultMemoryRetrieverOptions, "storage" | keyof AgentOptions> {
    storage?: MemoryStorage | DefaultMemoryStorageOptions;
}
export declare class DefaultMemory extends MemoryAgent {
    constructor(options?: DefaultMemoryOptions);
    storage: MemoryStorage;
}
export interface DefaultMemoryRetrieverOptions extends AgentOptions<MemoryRetrieverInput, MemoryRetrieverOutput> {
    storage: MemoryStorage;
    retrieveMemoryCount?: number;
    retrieveRecentMemoryCount?: number;
    inputKey?: string | string[];
    outputKey?: string | string[];
    getSearchPattern?: DefaultMemoryRetriever["getSearchPattern"];
    formatMessage?: DefaultMemoryRetriever["formatMessage"];
    formatMemory?: DefaultMemoryRetriever["formatMemory"];
}
export declare class DefaultMemoryRetriever extends MemoryRetriever {
    constructor(options: DefaultMemoryRetrieverOptions);
    private storage;
    private retrieveMemoryCount?;
    private retrieveRecentMemoryCount?;
    private inputKey?;
    private outputKey?;
    private getSearchPattern;
    private formatMessage;
    private formatMemory;
    process(input: MemoryRetrieverInput, options: AgentInvokeOptions): Promise<MemoryRetrieverOutput>;
}
export interface DefaultMemoryRecorderOptions extends AgentOptions<MemoryRecorderInput, MemoryRecorderOutput> {
    storage: MemoryStorage;
    inputKey?: string | string[];
    outputKey?: string | string[];
}
export declare class DefaultMemoryRecorder extends MemoryRecorder {
    constructor(options: DefaultMemoryRecorderOptions);
    private storage;
    private inputKey?;
    private outputKey?;
    process(input: MemoryRecorderInput, options: AgentInvokeOptions): Promise<MemoryRecorderOutput>;
}
