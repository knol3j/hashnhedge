import type { AgentInvokeOptions, Context, Memory } from "@aigne/core";
import type { PromiseOrValue } from "@aigne/core/utils/type-utils.js";
import type { SqliteRemoteDatabase } from "drizzle-orm/sqlite-proxy";
import { MemoryStorage } from "../storage.js";
import { Memories } from "./models/memory.js";
export interface DefaultMemoryStorageOptions {
    url?: string;
    getSessionId?: (context: Context) => PromiseOrValue<string>;
    enableFTS?: boolean;
}
export declare class DefaultMemoryStorage extends MemoryStorage {
    options?: DefaultMemoryStorageOptions | undefined;
    constructor(options?: DefaultMemoryStorageOptions | undefined);
    private _db;
    private initSqlite;
    get db(): Promise<SqliteRemoteDatabase<Record<string, never>>>;
    private convertMemory;
    search(query: {
        search?: string;
        limit?: number;
        orderBy?: [keyof typeof Memories.$inferSelect, "asc" | "desc"];
    }, { context }: AgentInvokeOptions): Promise<{
        result: Memory[];
    }>;
    create(memory: Pick<Memory, "content">, { context }: AgentInvokeOptions): Promise<{
        result: Memory;
    }>;
    protected segment(str: string): string[];
}
