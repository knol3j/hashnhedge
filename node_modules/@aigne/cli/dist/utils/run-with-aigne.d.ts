import { type Agent, type AIGNE, type ChatModelOptions, type Message } from "@aigne/core";
import { LogLevel } from "@aigne/core/utils/logger.js";
import { type PromiseOrValue } from "@aigne/core/utils/type-utils.js";
import type { Argv } from "yargs";
import { type ChatLoopOptions } from "./run-chat-loop.js";
export interface RunAIGNECommandOptions {
    chat?: boolean;
    model?: string;
    temperature?: number;
    topP?: number;
    presencePenalty?: number;
    frequencyPenalty?: number;
    input?: string[];
    format?: "text" | "json" | "yaml";
    output?: string;
    outputKey?: string;
    logLevel?: LogLevel;
    force?: boolean;
}
export declare const createRunAIGNECommand: (yargs: Argv) => Argv<{
    chat: boolean;
} & {
    model: string | undefined;
} & {
    temperature: number | undefined;
} & {
    "top-p": number | undefined;
} & {
    "presence-penalty": number | undefined;
} & {
    "frequency-penalty": number | undefined;
} & {
    input: (string | number)[] | undefined;
} & {
    format: string | undefined;
} & {
    output: string | undefined;
} & {
    "output-key": string;
} & {
    force: boolean;
} & {
    "log-level": LogLevel;
} & {
    "aigne-hub-url": string | undefined;
}>;
export declare function parseAgentInputByCommander(agent: Agent, options?: RunAIGNECommandOptions & {
    inputKey?: string;
    argv?: string[];
    defaultInput?: string | Message;
}): Promise<Message>;
export declare function runWithAIGNE(agentCreator: ((aigne: AIGNE) => PromiseOrValue<Agent>) | Agent, { argv, chatLoopOptions, modelOptions, outputKey, }?: {
    argv?: typeof process.argv;
    chatLoopOptions?: ChatLoopOptions;
    modelOptions?: ChatModelOptions;
    outputKey?: string;
}): Promise<void>;
export declare function runAgentWithAIGNE(aigne: AIGNE, agent: Agent, { outputKey, chatLoopOptions, modelOptions, ...options }?: {
    outputKey?: string;
    chatLoopOptions?: ChatLoopOptions;
    modelOptions?: ChatModelOptions;
    input?: Message;
} & Omit<RunAIGNECommandOptions, "input">): Promise<{
    result: Message;
} | undefined>;
