import { AIAgent } from "@aigne/core";
import { promiseWithResolvers } from "@aigne/core/utils/promise.js";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StreamableHTTPServerTransport } from "@modelcontextprotocol/sdk/server/streamableHttp.js";
import express, { json, Router } from "express";
import { ZodObject } from "zod";
import { AIGNE_CLI_VERSION } from "../constants.js";
export async function serveMCPServer({ pathname = "/mcp", aigne, host = "localhost", port, }) {
    const app = express();
    app.use(json());
    const router = Router();
    app.use(router);
    router.post(pathname, async (req, res) => {
        try {
            const server = createMcpServer(aigne);
            const transport = new StreamableHTTPServerTransport({ sessionIdGenerator: undefined });
            await server.connect(transport);
            await transport.handleRequest(req, res, req.body);
            res.on("close", async () => {
                await transport.close();
                await server.close();
            });
        }
        catch (error) {
            console.error("Error handling MCP request:", error);
            if (!res.headersSent) {
                res.status(500).json({
                    jsonrpc: "2.0",
                    error: {
                        code: -32603,
                        message: error.message,
                    },
                    id: null,
                });
            }
        }
    });
    router.get(pathname, async (_, res) => {
        res.writeHead(405).end(JSON.stringify({
            jsonrpc: "2.0",
            error: {
                code: -32000,
                message: "Method not allowed.",
            },
            id: null,
        }));
    });
    router.delete(pathname, async (_, res) => {
        res.writeHead(405).end(JSON.stringify({
            jsonrpc: "2.0",
            error: {
                code: -32000,
                message: "Method not allowed.",
            },
            id: null,
        }));
    });
    const { promise, resolve, reject } = promiseWithResolvers();
    const httpServer = app.listen(port, host, (error) => {
        if (error)
            reject(error);
        resolve();
    });
    await promise;
    return httpServer;
}
export function createMcpServer(aigne) {
    const server = new McpServer({
        name: aigne.name || "aigne-mcp-server",
        version: AIGNE_CLI_VERSION,
    }, {
        capabilities: { tools: {} },
        instructions: aigne.description,
    });
    for (const agent of aigne.mcpServer?.agents ?? []) {
        const schema = agent.inputSchema;
        if (!(schema instanceof ZodObject))
            throw new Error("Agent input schema must be a ZodObject");
        server.tool(agent.name, agent.description || "", schema.shape, async (input) => {
            const result = await aigne.invoke(agent, input);
            return {
                content: [
                    {
                        type: "text",
                        text: (agent instanceof AIAgent && result[agent.outputKey]) ||
                            JSON.stringify(result),
                    },
                ],
            };
        });
    }
    return server;
}
