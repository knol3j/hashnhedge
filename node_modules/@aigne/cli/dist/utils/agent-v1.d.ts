export declare function isV1Package(src: string): Promise<boolean>;
export declare function toAIGNEPackage(src: string, dst: string): Promise<void>;
export type Parameter = {
    id: string;
    key?: string;
    hidden?: boolean;
    required?: boolean;
    placeholder?: string;
} & ({
    type?: "string" | "number" | "boolean" | "language";
} | {
    type?: "select";
    options?: {
        id: string;
        label?: string;
        value?: string;
    }[];
});
export interface VariableTypeBase {
    id: string;
    name?: string;
    description?: string;
    required?: boolean;
    hidden?: boolean;
}
export type OutputVariable = VariableTypeBase & ({
    type?: undefined;
} | {
    type: "string";
    defaultValue?: string;
} | {
    type: "number";
    defaultValue?: number;
} | {
    type: "boolean";
    defaultValue?: boolean;
} | {
    type: "object";
    properties?: OutputVariable[];
} | {
    type: "array";
    element?: OutputVariable;
});
export type AgentV1 = {
    id: string;
    name?: string;
    description?: string;
    parameters?: Parameter[];
    outputVariables?: OutputVariable[];
} & ({
    type: "prompt";
    prompts?: Prompt[];
    temperature?: number;
    topP?: number;
    presencePenalty?: number;
    frequencyPenalty?: number;
    maxTokens?: number;
    model?: string;
} | {
    type: "router";
    defaultToolId?: string;
    prompt?: string;
    decisionType?: "ai";
    routes?: Tool[];
    temperature?: number;
    topP?: number;
    presencePenalty?: number;
    frequencyPenalty?: number;
    maxTokens?: number;
    model?: string;
} | {
    type: "image";
    prompt?: string;
    model?: string;
    n?: number;
    quality?: string;
    style?: string;
    size?: string;
    modelSettings?: {
        [key: string]: unknown;
    };
} | {
    type: "api";
    requestParameters?: {
        id: string;
        key?: string;
        value?: string;
    }[];
    requestMethod?: string;
    requestUrl?: string;
    requestHeaders: {
        id: string;
        key?: string;
        value?: string;
    }[];
} | {
    type: "function";
    code?: string;
} | {
    type: "callAgent";
    agents?: Tool[];
});
export interface ProjectDefinitionV1 {
    project: {
        name?: string;
        description?: string;
    };
    agents: AgentV1[];
}
export type Prompt = {
    type: "message";
    data: PromptMessage;
    visibility?: "hidden";
} | {
    type: "executeBlock";
    visibility?: "hidden";
};
export type PromptMessage = {
    id: string;
    role: Role;
    content?: string;
    name?: string;
};
export type Role = "system" | "user" | "assistant";
export type Tool = {
    blockletDid?: string;
    projectId?: string;
    id: string;
    from?: "assistant" | "blockletAPI" | "knowledge";
    parameters?: {
        [key: string]: unknown;
    };
    functionName?: string;
};
