import { AIGNE_HUB_DEFAULT_MODEL, findModel } from "@aigne/aigne-hub";
import { flat } from "@aigne/core/utils/type-utils.js";
import chalk from "chalk";
import inquirer from "inquirer";
import { AIGNE_HUB_PROVIDER } from "./constants.js";
import { loadAIGNEHubCredential } from "./credential.js";
export function maskApiKey(apiKey) {
    if (!apiKey || apiKey.length <= 8)
        return apiKey;
    const start = apiKey.slice(0, 4);
    const end = apiKey.slice(-4);
    return `${start}${"*".repeat(8)}${end}`;
}
export const parseModelOption = (model) => {
    const { provider, name } = model.match(/(?<provider>[^:]*)(:(?<name>.*))?/)?.groups ?? {};
    return { provider: provider?.replace(/-/g, ""), model: name };
};
export const formatModelName = async (model, inquirerPrompt) => {
    let { provider, model: name } = parseModelOption(model);
    provider ||= AIGNE_HUB_PROVIDER;
    const { match, all } = findModel(provider);
    if (!match)
        throw new Error(`Unsupported model: ${provider}/${name}, available providers: ${all.map((m) => m.name).join(", ")}`);
    if (provider.includes(AIGNE_HUB_PROVIDER)) {
        return { provider, model: name || AIGNE_HUB_DEFAULT_MODEL };
    }
    const requireEnvs = flat(match.apiKeyEnvName);
    if (requireEnvs.some((name) => name && process.env[name])) {
        return { provider, model: name };
    }
    const result = await inquirerPrompt({
        type: "list",
        name: "useAigneHub",
        message: `No API key is configured for ${provider}/${name}, How would you like to proceed?`,
        choices: [
            {
                name: `Connect to AIGNE Hub to use ${name} (recommended â€” includes free credits)`,
                value: true,
            },
            {
                name: `Exit and use my own API key (set ${requireEnvs.join(" or ")})`,
                value: false,
            },
        ],
        default: true,
    });
    if (!result.useAigneHub) {
        console.log(chalk.yellow(`You can use command "export ${requireEnvs[0]}=xxx" to set API Key in your shell. Or you can set environment variables in .env file.`));
        process.exit(0);
    }
    return { provider: AIGNE_HUB_PROVIDER, model: `${provider}/${name}` };
};
export async function loadChatModel(options) {
    const { provider, model } = await formatModelName(options?.model || process.env.MODEL || "", options?.inquirerPromptFn ??
        inquirer.prompt);
    const params = {
        model,
        temperature: options?.temperature,
        topP: options?.topP,
        frequencyPenalty: options?.frequencyPenalty,
        presencePenalty: options?.presencePenalty,
    };
    const { match, all } = findModel(provider);
    if (!match) {
        throw new Error(`Unsupported model provider ${provider}, available providers: ${all.map((m) => m.name).join(", ")}`);
    }
    const credential = provider.toLowerCase().includes(AIGNE_HUB_PROVIDER)
        ? await loadAIGNEHubCredential(options)
        : undefined;
    return match.create({
        ...credential,
        model: params.model,
        modelOptions: { ...params },
    });
}
