import type { AgentResponseStream, Message } from "@aigne/core";
import type { PromiseOrValue } from "@aigne/core/utils/type-utils";
import { DefaultRenderer, Listr, type ListrDefaultRendererOptions, ListrLogger, type ListrSimpleRendererOptions, type ListrTaskWrapper, SimpleRenderer, Spinner } from "@aigne/listr2";
import type { createLogUpdate } from "log-update";
export type AIGNEListrTaskWrapper = ListrTaskWrapper<unknown, typeof AIGNEListrRenderer, typeof AIGNEListrFallbackRenderer>;
export declare class AIGNEListr extends Listr<object, typeof AIGNEListrRenderer, typeof AIGNEListrFallbackRenderer> {
    myOptions: {
        formatRequest: () => string | undefined;
        formatResult: (result: Message, options?: {
            running?: boolean;
        }) => string[];
    };
    private result;
    private error?;
    private logs;
    private spinner;
    constructor(myOptions: {
        formatRequest: () => string | undefined;
        formatResult: (result: Message, options?: {
            running?: boolean;
        }) => string[];
    }, ...[task, options, parentTask]: ConstructorParameters<typeof Listr<object, typeof AIGNEListrRenderer, typeof AIGNEListrFallbackRenderer>>);
    run(stream: () => PromiseOrValue<AgentResponseStream<Message>>): Promise<Message>;
    private extractStream;
}
export interface AIGNEListrRendererOptions extends ListrDefaultRendererOptions {
    aigne?: {
        getStdoutLogs?: () => string[];
        getBottomBarLogs?: (options?: {
            running?: boolean;
        }) => string[];
    };
}
export declare class AIGNEListrRenderer extends DefaultRenderer {
    static rendererOptions: AIGNEListrRendererOptions;
    get _updater(): ReturnType<typeof createLogUpdate>;
    get _logger(): ListrLogger;
    get _options(): AIGNEListrRendererOptions;
    get _spinner(): Spinner;
    update(): void;
    private paused;
    private ended;
    end(): void;
    pause(): Promise<void>;
    resume(): Promise<void>;
    log(message: string): void;
    private isPreviousPrompt;
    create({ running, ...options }: Parameters<DefaultRenderer["create"]>[0] & {
        running?: boolean;
    }): string;
    _wrap(str: string): string;
}
export interface AIGNEListrFallbackRendererOptions extends ListrSimpleRendererOptions, Pick<AIGNEListrRendererOptions, "aigne"> {
}
export declare class AIGNEListrFallbackRenderer extends SimpleRenderer {
    static rendererOptions: AIGNEListrFallbackRendererOptions;
    get _logger(): ListrLogger;
    get _options(): AIGNEListrFallbackRendererOptions;
    end(): void;
}
