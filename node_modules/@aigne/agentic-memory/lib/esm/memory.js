import { AIAgent, MemoryAgent, MemoryRecorder, } from "@aigne/core";
import { flat, pick } from "@aigne/core/utils/type-utils.js";
import { DefaultMemoryRetriever, DefaultMemoryStorage, MemoryStorage, } from "@aigne/default-memory";
import { z } from "zod";
import { DEFAULT_AGENTIC_MEMORY_RECORDER_INSTRUCTIONS } from "./prompt.js";
export class AgenticMemory extends MemoryAgent {
    constructor(options = {}) {
        const storage = options.storage instanceof MemoryStorage
            ? options.storage
            : new DefaultMemoryStorage(options.storage);
        super({
            ...options,
            recorder: options.recorder ?? new AgenticMemoryRecorder({ ...options, storage }),
            retriever: options.retriever ?? new AgenticMemoryRetriever({ ...options, storage }),
            autoUpdate: options.autoUpdate ?? true,
        });
        this.storage = storage;
    }
    storage;
}
export class AgenticMemoryRetriever extends DefaultMemoryRetriever {
}
export class AgenticMemoryRecorder extends MemoryRecorder {
    constructor(options) {
        super(options);
        this.storage = options.storage;
        this.inputKey = flat(options.inputKey);
        this.outputKey = flat(options.outputKey);
        this.agent =
            options.agent ??
                AIAgent.from({
                    name: "agentic_memory_extractor",
                    description: "Records memories in files by AI agent",
                    instructions: options.instructions || DEFAULT_AGENTIC_MEMORY_RECORDER_INSTRUCTIONS,
                    outputSchema: z.object({
                        newMemories: z
                            .array(z.object({
                            content: z.string().describe("Content of the memory"),
                        }))
                            .describe("Newly created memories"),
                    }),
                });
    }
    storage;
    inputKey;
    outputKey;
    agent;
    async process(input, options) {
        const agenticMemories = await options.context.invoke(this.agent, {
            content: input.content.map((item) => ({
                input: item.input && this.inputKey?.length ? pick(item.input, this.inputKey) : item.input,
                output: item.output && this.outputKey?.length ? pick(item.output, this.outputKey) : item.output,
                source: item.source,
            })),
        });
        const newMemories = [];
        for (const item of agenticMemories.newMemories) {
            const { result } = await this.storage.create({ content: item.content }, options);
            newMemories.push(result);
        }
        return {
            memories: newMemories,
        };
    }
}
