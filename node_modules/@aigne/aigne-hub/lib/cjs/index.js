"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AIGNEHubImageModel = exports.AIGNEHubChatModel = void 0;
const core_1 = require("@aigne/core");
const model_js_1 = require("./utils/model.js");
__exportStar(require("./utils/blocklet.js"), exports);
__exportStar(require("./utils/constants.js"), exports);
__exportStar(require("./utils/model.js"), exports);
class AIGNEHubChatModel extends core_1.ChatModel {
    options;
    static async load(options) {
        return new AIGNEHubChatModel(options);
    }
    constructor(options) {
        const provider = process.env.BLOCKLET_AIGNE_API_PROVIDER || AIGNEHubChatModel.name;
        const { match, all } = (0, model_js_1.findModel)(provider);
        if (!match) {
            const available = all.map((m) => m.name).join(", ");
            throw new Error(`Unsupported model provider: ${provider} ${process.env.BLOCKLET_AIGNE_API_MODEL}. Available providers: ${available}`);
        }
        const client = match.create(options);
        super({ name: client.name });
        this.options = options;
        this.client = client;
    }
    client;
    get credential() {
        return this.client.credential;
    }
    async process(input, options) {
        return this.client.invoke(input, options);
    }
}
exports.AIGNEHubChatModel = AIGNEHubChatModel;
class AIGNEHubImageModel extends core_1.ImageModel {
    options;
    static async load(options) {
        return new AIGNEHubImageModel(options);
    }
    constructor(options) {
        const provider = process.env.BLOCKLET_AIGNE_API_PROVIDER || AIGNEHubImageModel.name;
        const { match, all } = (0, model_js_1.findImageModel)(provider);
        if (!match) {
            const available = all.map((m) => m.name).join(", ");
            throw new Error(`Unsupported model provider: ${provider} ${process.env.BLOCKLET_AIGNE_API_MODEL}. Available providers: ${available}`);
        }
        const client = match.create(options);
        super({ name: client.name });
        this.options = options;
        this.client = client;
    }
    client;
    get credential() {
        return this.client.credential;
    }
    async process(input, options) {
        return this.client.invoke(input, options);
    }
}
exports.AIGNEHubImageModel = AIGNEHubImageModel;
