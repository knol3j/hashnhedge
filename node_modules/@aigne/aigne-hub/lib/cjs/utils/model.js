"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.availableModels = availableModels;
exports.availableImageModels = availableImageModels;
exports.findModel = findModel;
exports.findImageModel = findImageModel;
const anthropic_1 = require("@aigne/anthropic");
const bedrock_1 = require("@aigne/bedrock");
const deepseek_1 = require("@aigne/deepseek");
const doubao_1 = require("@aigne/doubao");
const gemini_1 = require("@aigne/gemini");
const ideogram_1 = require("@aigne/ideogram");
const ollama_1 = require("@aigne/ollama");
const open_router_1 = require("@aigne/open-router");
const openai_1 = require("@aigne/openai");
const poe_1 = require("@aigne/poe");
const xai_1 = require("@aigne/xai");
const node_http_handler_1 = require("@smithy/node-http-handler");
const https_proxy_agent_1 = require("https-proxy-agent");
const aigne_hub_image_model_js_1 = require("../aigne-hub-image-model.js");
const aigne_hub_model_js_1 = require("../aigne-hub-model.js");
const getClientOptions = () => {
    const proxy = ["HTTPS_PROXY", "https_proxy", "HTTP_PROXY", "http_proxy", "ALL_PROXY", "all_proxy"]
        .map((i) => process.env[i])
        .filter(Boolean)[0];
    const httpAgent = proxy ? new https_proxy_agent_1.HttpsProxyAgent(proxy) : undefined;
    const clientOptions = {
        fetchOptions: {
            // @ts-ignore
            agent: httpAgent,
        },
    };
    return {
        clientOptions,
        httpAgent,
    };
};
function availableModels() {
    const { clientOptions, httpAgent } = getClientOptions();
    return [
        {
            name: openai_1.OpenAIChatModel.name,
            apiKeyEnvName: "OPENAI_API_KEY",
            create: (params) => new openai_1.OpenAIChatModel({ ...params, clientOptions }),
        },
        {
            name: anthropic_1.AnthropicChatModel.name,
            apiKeyEnvName: "ANTHROPIC_API_KEY",
            create: (params) => new anthropic_1.AnthropicChatModel({ ...params, clientOptions }),
        },
        {
            name: bedrock_1.BedrockChatModel.name,
            apiKeyEnvName: "AWS_ACCESS_KEY_ID",
            create: (params) => new bedrock_1.BedrockChatModel({
                ...params,
                clientOptions: {
                    requestHandler: node_http_handler_1.NodeHttpHandler.create({ httpAgent, httpsAgent: httpAgent }),
                    streamCollector: node_http_handler_1.streamCollector,
                },
            }),
        },
        {
            name: deepseek_1.DeepSeekChatModel.name,
            apiKeyEnvName: "DEEPSEEK_API_KEY",
            create: (params) => new deepseek_1.DeepSeekChatModel({ ...params, clientOptions }),
        },
        {
            name: [gemini_1.GeminiChatModel.name, "google"],
            apiKeyEnvName: ["GEMINI_API_KEY", "GOOGLE_API_KEY"],
            create: (params) => new gemini_1.GeminiChatModel({ ...params, clientOptions }),
        },
        {
            name: ollama_1.OllamaChatModel.name,
            apiKeyEnvName: "OLLAMA_API_KEY",
            create: (params) => new ollama_1.OllamaChatModel({ ...params, clientOptions }),
        },
        {
            name: open_router_1.OpenRouterChatModel.name,
            apiKeyEnvName: "OPEN_ROUTER_API_KEY",
            create: (params) => new open_router_1.OpenRouterChatModel({ ...params, clientOptions }),
        },
        {
            name: xai_1.XAIChatModel.name,
            apiKeyEnvName: "XAI_API_KEY",
            create: (params) => new xai_1.XAIChatModel({ ...params, clientOptions }),
        },
        {
            name: doubao_1.DoubaoChatModel.name,
            apiKeyEnvName: "DOUBAO_API_KEY",
            create: (params) => new doubao_1.DoubaoChatModel({ ...params, clientOptions }),
        },
        {
            name: poe_1.PoeChatModel.name,
            apiKeyEnvName: "POE_API_KEY",
            create: (params) => new poe_1.PoeChatModel({ ...params, clientOptions }),
        },
        {
            name: aigne_hub_model_js_1.AIGNEHubChatModel.name,
            apiKeyEnvName: "AIGNE_HUB_API_KEY",
            create: (params) => new aigne_hub_model_js_1.AIGNEHubChatModel({ ...params, clientOptions }),
        },
    ];
}
function availableImageModels() {
    const { clientOptions } = getClientOptions();
    return [
        {
            name: openai_1.OpenAIImageModel.name,
            apiKeyEnvName: "OPENAI_API_KEY",
            create: (params) => new openai_1.OpenAIImageModel({ ...params, clientOptions }),
        },
        {
            name: gemini_1.GeminiImageModel.name,
            apiKeyEnvName: "GEMINI_API_KEY",
            create: (params) => new gemini_1.GeminiImageModel({ ...params, clientOptions }),
        },
        {
            name: ideogram_1.IdeogramImageModel.name,
            apiKeyEnvName: "IDEOGRAM_API_KEY",
            create: (params) => new ideogram_1.IdeogramImageModel({ ...params }),
        },
        {
            name: aigne_hub_image_model_js_1.AIGNEHubImageModel.name,
            apiKeyEnvName: "AIGNE_HUB_API_KEY",
            create: (params) => new aigne_hub_image_model_js_1.AIGNEHubImageModel({ ...params, clientOptions }),
        },
    ];
}
function findModel(provider) {
    provider = provider.toLowerCase().replace(/-/g, "");
    const all = availableModels();
    const match = all.find((m) => {
        if (typeof m.name === "string") {
            return m.name.toLowerCase().includes(provider);
        }
        return m.name.some((n) => n.toLowerCase().includes(provider));
    });
    return { all, match };
}
function findImageModel(provider) {
    provider = provider.toLowerCase().replace(/-/g, "");
    const all = availableImageModels();
    const match = all.find((m) => m.name.toLowerCase().includes(provider));
    return { all, match };
}
