"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AIGNEHubImageModel = void 0;
const core_1 = require("@aigne/core");
const type_utils_js_1 = require("@aigne/core/utils/type-utils.js");
const index_js_1 = require("@aigne/platform-helpers/nodejs/index.js");
const base_client_js_1 = require("@aigne/transport/http-client/base-client.js");
const ufo_1 = require("ufo");
const blocklet_js_1 = require("./utils/blocklet.js");
const constants_js_1 = require("./utils/constants.js");
const type_js_1 = require("./utils/type.js");
class AIGNEHubImageModel extends core_1.ImageModel {
    options;
    constructor(options) {
        (0, type_utils_js_1.checkArguments)("AIGNEHubImageModel", type_js_1.aigneHubModelOptionsSchema, options);
        super();
        this.options = options;
    }
    _client;
    get client() {
        this._client ??= this.credential.then(({ url, apiKey, model }) => {
            const options = { ...this.options, url, apiKey, model };
            return new base_client_js_1.BaseClient(options);
        });
        return this._client;
    }
    _credential;
    get credential() {
        this._credential ??= (0, blocklet_js_1.getAIGNEHubMountPoint)(this.options.url ||
            this.options.baseURL ||
            process.env.BLOCKLET_AIGNE_API_URL ||
            process.env.AIGNE_HUB_API_URL ||
            constants_js_1.AIGNE_HUB_URL, constants_js_1.AIGNE_HUB_BLOCKLET_DID).then((url) => {
            const path = "/api/v2/image";
            const rawCredential = process.env.BLOCKLET_AIGNE_API_CREDENTIAL;
            let credentialOptions = {};
            try {
                credentialOptions =
                    typeof rawCredential === "string" ? JSON.parse(rawCredential) : (rawCredential ?? {});
            }
            catch (err) {
                console.error(err);
            }
            return {
                ...credentialOptions,
                url: url.endsWith(path) ? url : (0, ufo_1.joinURL)(url, path),
                apiKey: this.options.apiKey || process.env.AIGNE_HUB_API_KEY || credentialOptions.apiKey,
                model: this.options.model || process.env.BLOCKLET_AIGNE_API_MODEL || constants_js_1.AIGNE_HUB_IMAGE_MODEL,
            };
        });
        return this._credential;
    }
    async process(input, options) {
        const { BLOCKLET_APP_PID, ABT_NODE_DID } = index_js_1.nodejs.env;
        const clientId = this.options?.clientOptions?.clientId ||
            BLOCKLET_APP_PID ||
            ABT_NODE_DID ||
            `@aigne/aigne-hub:${typeof process !== "undefined" ? index_js_1.nodejs.os.hostname() : "unknown"}`;
        const response = await (await this.client).__invoke(undefined, input, {
            ...options,
            streaming: false,
            fetchOptions: {
                ...options.fetchOptions,
                headers: {
                    ...options.fetchOptions?.headers,
                    "x-aigne-hub-client-did": clientId,
                },
            },
        });
        return {
            images: response.images,
            usage: {
                inputTokens: response.usage?.inputTokens ?? 0,
                outputTokens: response.usage?.outputTokens ?? 0,
                aigneHubCredits: response.usage?.aigneHubCredits,
            },
            model: response?.model,
        };
    }
}
exports.AIGNEHubImageModel = AIGNEHubImageModel;
