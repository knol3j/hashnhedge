import { ChatModel, ImageModel, } from "@aigne/core";
import { findImageModel, findModel } from "./utils/model.js";
export * from "./utils/blocklet.js";
export * from "./utils/constants.js";
export * from "./utils/model.js";
export class AIGNEHubChatModel extends ChatModel {
    options;
    static async load(options) {
        return new AIGNEHubChatModel(options);
    }
    constructor(options) {
        const provider = process.env.BLOCKLET_AIGNE_API_PROVIDER || AIGNEHubChatModel.name;
        const { match, all } = findModel(provider);
        if (!match) {
            const available = all.map((m) => m.name).join(", ");
            throw new Error(`Unsupported model provider: ${provider} ${process.env.BLOCKLET_AIGNE_API_MODEL}. Available providers: ${available}`);
        }
        const client = match.create(options);
        super({ name: client.name });
        this.options = options;
        this.client = client;
    }
    client;
    get credential() {
        return this.client.credential;
    }
    async process(input, options) {
        return this.client.invoke(input, options);
    }
}
export class AIGNEHubImageModel extends ImageModel {
    options;
    static async load(options) {
        return new AIGNEHubImageModel(options);
    }
    constructor(options) {
        const provider = process.env.BLOCKLET_AIGNE_API_PROVIDER || AIGNEHubImageModel.name;
        const { match, all } = findImageModel(provider);
        if (!match) {
            const available = all.map((m) => m.name).join(", ");
            throw new Error(`Unsupported model provider: ${provider} ${process.env.BLOCKLET_AIGNE_API_MODEL}. Available providers: ${available}`);
        }
        const client = match.create(options);
        super({ name: client.name });
        this.options = options;
        this.client = client;
    }
    client;
    get credential() {
        return this.client.credential;
    }
    async process(input, options) {
        return this.client.invoke(input, options);
    }
}
