import type { ChatModelOptions } from "@aigne/core";
import type { OpenAIChatModelOptions } from "@aigne/openai";
import { z } from "zod";
export declare const aigneHubModelOptionsSchema: z.ZodObject<{
    url: z.ZodOptional<z.ZodString>;
    apiKey: z.ZodOptional<z.ZodString>;
    model: z.ZodOptional<z.ZodString>;
    modelOptions: z.ZodOptional<z.ZodObject<{
        model: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        frequencyPenalty: z.ZodOptional<z.ZodNumber>;
        presencePenalty: z.ZodOptional<z.ZodNumber>;
        parallelToolCalls: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        parallelToolCalls: boolean;
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
    }, {
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        parallelToolCalls?: boolean | undefined;
    }>>;
    clientOptions: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    url?: string | undefined;
    apiKey?: string | undefined;
    model?: string | undefined;
    modelOptions?: {
        parallelToolCalls: boolean;
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
    } | undefined;
    clientOptions?: {} | undefined;
}, {
    url?: string | undefined;
    apiKey?: string | undefined;
    model?: string | undefined;
    modelOptions?: {
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        parallelToolCalls?: boolean | undefined;
    } | undefined;
    clientOptions?: {} | undefined;
}>;
export interface AIGNEHubChatModelOptions {
    url?: string;
    baseURL?: string;
    apiKey?: string;
    model?: string;
    modelOptions?: ChatModelOptions;
    clientOptions?: OpenAIChatModelOptions["clientOptions"] & {
        clientId?: string;
    };
}
export type AIGNEHubImageModelOptions = Omit<AIGNEHubChatModelOptions, "modelOptions"> & {
    modelOptions?: {
        [key: string]: any;
    };
};
