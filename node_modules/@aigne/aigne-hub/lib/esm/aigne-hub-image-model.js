import { ImageModel, } from "@aigne/core";
import { checkArguments } from "@aigne/core/utils/type-utils.js";
import { nodejs } from "@aigne/platform-helpers/nodejs/index.js";
import { BaseClient, } from "@aigne/transport/http-client/base-client.js";
import { joinURL } from "ufo";
import { getAIGNEHubMountPoint } from "./utils/blocklet.js";
import { AIGNE_HUB_BLOCKLET_DID, AIGNE_HUB_IMAGE_MODEL, AIGNE_HUB_URL } from "./utils/constants.js";
import { aigneHubModelOptionsSchema } from "./utils/type.js";
export class AIGNEHubImageModel extends ImageModel {
    options;
    constructor(options) {
        checkArguments("AIGNEHubImageModel", aigneHubModelOptionsSchema, options);
        super();
        this.options = options;
    }
    _client;
    get client() {
        this._client ??= this.credential.then(({ url, apiKey, model }) => {
            const options = { ...this.options, url, apiKey, model };
            return new BaseClient(options);
        });
        return this._client;
    }
    _credential;
    get credential() {
        this._credential ??= getAIGNEHubMountPoint(this.options.url ||
            this.options.baseURL ||
            process.env.BLOCKLET_AIGNE_API_URL ||
            process.env.AIGNE_HUB_API_URL ||
            AIGNE_HUB_URL, AIGNE_HUB_BLOCKLET_DID).then((url) => {
            const path = "/api/v2/image";
            const rawCredential = process.env.BLOCKLET_AIGNE_API_CREDENTIAL;
            let credentialOptions = {};
            try {
                credentialOptions =
                    typeof rawCredential === "string" ? JSON.parse(rawCredential) : (rawCredential ?? {});
            }
            catch (err) {
                console.error(err);
            }
            return {
                ...credentialOptions,
                url: url.endsWith(path) ? url : joinURL(url, path),
                apiKey: this.options.apiKey || process.env.AIGNE_HUB_API_KEY || credentialOptions.apiKey,
                model: this.options.model || process.env.BLOCKLET_AIGNE_API_MODEL || AIGNE_HUB_IMAGE_MODEL,
            };
        });
        return this._credential;
    }
    async process(input, options) {
        const { BLOCKLET_APP_PID, ABT_NODE_DID } = nodejs.env;
        const clientId = this.options?.clientOptions?.clientId ||
            BLOCKLET_APP_PID ||
            ABT_NODE_DID ||
            `@aigne/aigne-hub:${typeof process !== "undefined" ? nodejs.os.hostname() : "unknown"}`;
        const response = await (await this.client).__invoke(undefined, input, {
            ...options,
            streaming: false,
            fetchOptions: {
                ...options.fetchOptions,
                headers: {
                    ...options.fetchOptions?.headers,
                    "x-aigne-hub-client-did": clientId,
                },
            },
        });
        return {
            images: response.images,
            usage: {
                inputTokens: response.usage?.inputTokens ?? 0,
                outputTokens: response.usage?.outputTokens ?? 0,
                aigneHubCredits: response.usage?.aigneHubCredits,
            },
            model: response?.model,
        };
    }
}
