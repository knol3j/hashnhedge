import { Agent, type AgentInvokeOptions, type AgentOptions, type Message } from "@aigne/core";
import { type FullPlanOutput, type StepWithResult } from "./orchestrator-prompts.js";
/**
 * Re-export orchestrator prompt templates and related types
 */
export * from "./orchestrator-prompts.js";
/**
 * Represents a complete plan with execution results
 * @hidden
 */
export interface FullPlanWithResult {
    /**
     * The overall objective
     */
    objective: string;
    /**
     * The generated complete plan
     */
    plan?: FullPlanOutput;
    /**
     * List of executed steps with their results
     */
    steps: StepWithResult[];
    /**
     * Final result
     */
    result?: string;
    /**
     * Plan completion status
     */
    status?: boolean;
}
/**
 * Configuration options for the Orchestrator Agent
 */
export interface OrchestratorAgentOptions<I extends Message = Message, O extends Message = Message> extends AgentOptions<I, O> {
    /**
     * Maximum number of iterations to prevent infinite loops
     * Default: 30
     */
    maxIterations?: number;
    /**
     * Number of concurrent tasks
     * Default: 5
     */
    tasksConcurrency?: number;
    inputKey: string;
}
/**
 * Orchestrator Agent Class
 *
 * This Agent is responsible for:
 * 1. Generating an execution plan based on the objective
 * 2. Breaking down the plan into steps and tasks
 * 3. Coordinating the execution of steps and tasks
 * 4. Synthesizing the final result
 *
 * Workflow:
 * - Receives input objective
 * - Uses planner to create execution plan
 * - Executes tasks and steps according to the plan
 * - Synthesizes final result through completer
 */
export declare class OrchestratorAgent<I extends Message = Message, O extends Message = Message> extends Agent<I, O> {
    tag: string;
    /**
     * Factory method to create an OrchestratorAgent instance
     * @param options - Configuration options for the Orchestrator Agent
     * @returns A new OrchestratorAgent instance
     */
    static from<I extends Message, O extends Message>(options: OrchestratorAgentOptions<I, O>): OrchestratorAgent<I, O>;
    /**
     * Creates an OrchestratorAgent instance
     * @param options - Configuration options for the Orchestrator Agent
     */
    constructor(options: OrchestratorAgentOptions<I, O>);
    private planner;
    private completer;
    inputKey: string;
    /**
     * Maximum number of iterations
     * Prevents infinite execution loops
     */
    maxIterations?: number;
    /**
     * Number of concurrent tasks
     * Controls how many tasks can be executed simultaneously
     */
    tasksConcurrency?: number;
    /**
     * Process input and execute the orchestrator workflow
     *
     * Workflow:
     * 1. Extract the objective
     * 2. Loop until plan completion or maximum iterations:
     *    a. Generate/update execution plan
     *    b. If plan is complete, synthesize result
     *    c. Otherwise, execute steps in the plan
     *
     * @param input - Input message containing the objective
     * @param options - Agent invocation options
     * @returns Processing result
     */
    process(input: I, options: AgentInvokeOptions): Promise<O>;
    private getFullPlanInput;
    private getFullPlan;
    private synthesizePlanResult;
    private executeStep;
}
