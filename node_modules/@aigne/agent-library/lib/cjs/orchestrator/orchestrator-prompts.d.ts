import type { Agent, Message } from "@aigne/core";
import { z } from "zod";
/**
 * @hidden
 */
export declare const SYNTHESIZE_PLAN_USER_PROMPT_TEMPLATE = "Synthesize the results of executing all steps in the plan into a cohesive result\n";
/**
 * @hidden
 */
export declare function getFullPlanSchema(agents: Agent[]): z.ZodObject<{
    steps: z.ZodArray<z.ZodObject<{
        description: z.ZodString;
        tasks: z.ZodArray<z.ZodObject<{
            description: z.ZodString;
            agent: z.ZodUnion<[z.ZodLiteral<string>, z.ZodLiteral<string>, ...z.ZodLiteral<string>[]]>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            agent: string;
        }, {
            description: string;
            agent: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        description: string;
        tasks: {
            description: string;
            agent: string;
        }[];
    }, {
        description: string;
        tasks: {
            description: string;
            agent: string;
        }[];
    }>, "many">;
    isComplete: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    steps: {
        description: string;
        tasks: {
            description: string;
            agent: string;
        }[];
    }[];
    isComplete: boolean;
}, {
    steps: {
        description: string;
        tasks: {
            description: string;
            agent: string;
        }[];
    }[];
    isComplete: boolean;
}>;
/**
 * @hidden
 */
export type FullPlanOutput = z.infer<ReturnType<typeof getFullPlanSchema>>;
/**
 * @hidden
 */
export type Step = FullPlanOutput["steps"][number];
/**
 * @hidden
 */
export type Task = Step["tasks"][number];
/**
 * @hidden
 */
export interface StepWithResult {
    step: Step;
    tasks: Array<TaskWithResult>;
    result: string;
}
/**
 * @hidden
 */
export interface TaskWithResult {
    task: Task;
    result: string;
}
/**
 * @hidden
 */
export interface FullPlanInput extends Message {
    objective: string;
    steps: StepWithResult[];
    plan: {
        status: string;
        result: string;
    };
    agents: {
        name: string;
        description?: string;
        tools: {
            name: string;
            description?: string;
        }[];
    }[];
}
/**
 * @hidden
 */
export declare const FULL_PLAN_PROMPT_TEMPLATE = "You are tasked with orchestrating a plan to complete an objective.\nYou can analyze results from the previous steps already executed to decide if the objective is complete.\nYour plan must be structured in sequential steps, with each step containing independent parallel subtasks.\n\n<objective>\n{{objective}}\n</objective>\n\n<steps_completed>\n{% for step in steps %}\n- Step: {{step.description}}\n  Result: {{result}}\n{% endfor %}\n</steps_completed>\n\n<previous_plan_status>\n{{plan.status}}\n</previous_plan_status>\n\n<previous_plan_result>\n{{plan.result}}\n</previous_plan_result>\n\nYou have access to the following Agents(which are collections of tools/functions):\n\n<agents>\n{% for agent in agents %}\n- Agent: {{agent.name}}\n  Description: {{agent.description}}\n  Functions:\n    {% for tool in tools %}\n    - Tool: {{tool.name}}\n      Description: {{tool.description}}\n    {% endfor %}\n{% endfor %}\n</agents>\n\n- If the previous plan results achieve the objective, return isComplete=true.\n- Otherwise, generate remaining steps needed.\n- Generate a plan with all remaining steps needed.\n- Steps are sequential, but each Step can have parallel subtasks.\n- For each Step, specify a description of the step and independent subtasks that can run in parallel.\n- For each subtask specify:\n    1. Clear description of the task that an LLM can execute\n    2. Name of 1 Agent to use for the task";
/**
 * @hidden
 */
export interface TaskPromptInput extends Message {
    objective: string;
    step: Step;
    task: Task;
    steps: StepWithResult[];
}
/**
 * @hidden
 */
export declare const TASK_PROMPT_TEMPLATE = "You are part of a larger workflow to achieve the step then the objective:\n\n<objective>\n{{objective}}\n</objective>\n\n<step>\n{{step.description}}\n</step>\n\nYour job is to accomplish only the following task:\n\n<task>\n{{task.description}}\n</task>\n\nResults so far that may provide helpful context:\n\n<steps_completed>\n{% for step in steps %}\n- Step: {{step.description}}\n  Result: {{step.result}}\n{% endfor %}\n</steps_completed>\n";
/**
 * @hidden
 */
export interface SynthesizeStepPromptInput extends Message {
    objective: string;
    step: Step;
    tasks: TaskWithResult[];
}
/**
 * @hidden
 */
export declare const SYNTHESIZE_STEP_PROMPT_TEMPLATE = "Synthesize the results of these parallel tasks into a cohesive result\n\n<objective>\n{{objective}}\n</objective>\n\n<step>\n{{step.description}}\n</step>\n\n<tasks>\n{% for task in tasks %}\n- Task: {{task.description}}\n  Result: {{task.result}}\n{% endfor %}\n</tasks>\n";
