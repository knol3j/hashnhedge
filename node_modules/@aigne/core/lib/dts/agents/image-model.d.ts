import { z } from "zod";
import type { PromiseOrValue } from "../utils/type-utils.js";
import { Agent, type AgentInvokeOptions, type AgentOptions, type AgentProcessResult, type Message } from "./agent.js";
import { type ChatModelOutputUsage } from "./chat-model.js";
export interface ImageModelOptions<I extends ImageModelInput = ImageModelInput, O extends ImageModelOutput = ImageModelOutput> extends AgentOptions<I, O> {
}
export declare abstract class ImageModel<I extends ImageModelInput = ImageModelInput, O extends ImageModelOutput = ImageModelOutput> extends Agent<I, O> {
    tag: string;
    constructor(options?: ImageModelOptions<I, O>);
    get credential(): PromiseOrValue<{
        url?: string;
        apiKey?: string;
        model?: string;
    }>;
    protected preprocess(input: I, options: AgentInvokeOptions): Promise<void>;
    protected postprocess(input: I, output: O, options: AgentInvokeOptions): Promise<void>;
    abstract process(input: I, options: AgentInvokeOptions): PromiseOrValue<AgentProcessResult<O>>;
}
export interface ImageModelInput extends Message {
    model?: string;
    image?: string | string[];
    prompt: string;
    n?: number;
    responseFormat?: "url" | "base64";
}
export declare const imageModelInputSchema: z.ZodObject<{
    model: z.ZodOptional<z.ZodString>;
    image: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    prompt: z.ZodString;
    n: z.ZodOptional<z.ZodNumber>;
    responseFormat: z.ZodOptional<z.ZodEnum<["url", "base64"]>>;
}, "strip", z.ZodTypeAny, {
    prompt: string;
    model?: string | undefined;
    responseFormat?: "url" | "base64" | undefined;
    image?: string | string[] | undefined;
    n?: number | undefined;
}, {
    prompt: string;
    model?: string | undefined;
    responseFormat?: "url" | "base64" | undefined;
    image?: string | string[] | undefined;
    n?: number | undefined;
}>;
export interface ImageModelOutput extends Message {
    images: ImageModelOutputImage[];
    /**
     * Token usage statistics
     */
    usage?: ChatModelOutputUsage;
    /**
     * Model name or version used
     */
    model?: string;
}
export type ImageModelOutputImage = ImageModelOutputImageUrl | ImageModelOutputImageBase64;
export interface ImageModelOutputImageUrl {
    url: string;
}
export interface ImageModelOutputImageBase64 {
    base64: string;
}
export declare const imageModelOutputSchema: z.ZodObject<{
    images: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>, z.ZodObject<{
        base64: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        base64: string;
    }, {
        base64: string;
    }>]>, "many">;
    usage: z.ZodOptional<z.ZodObject<{
        inputTokens: z.ZodNumber;
        outputTokens: z.ZodNumber;
        aigneHubCredits: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        inputTokens: number;
        outputTokens: number;
        aigneHubCredits?: number | undefined;
    }, {
        inputTokens: number;
        outputTokens: number;
        aigneHubCredits?: number | undefined;
    }>>;
    model: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    images: ({
        url: string;
    } | {
        base64: string;
    })[];
    model?: string | undefined;
    usage?: {
        inputTokens: number;
        outputTokens: number;
        aigneHubCredits?: number | undefined;
    } | undefined;
}, {
    images: ({
        url: string;
    } | {
        base64: string;
    })[];
    model?: string | undefined;
    usage?: {
        inputTokens: number;
        outputTokens: number;
        aigneHubCredits?: number | undefined;
    } | undefined;
}>;
