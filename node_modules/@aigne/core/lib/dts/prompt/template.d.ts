import nunjucks, { type Callback, type LoaderSource } from "nunjucks";
import type { ChatModelInputMessage, ChatModelInputMessageContent, ChatModelOutputToolCall } from "../agents/chat-model.js";
export interface FormatOptions {
    workingDir?: string;
}
export declare class PromptTemplate {
    template: string;
    static from(template: string): PromptTemplate;
    constructor(template: string);
    format(variables?: Record<string, unknown>, options?: FormatOptions): Promise<string>;
}
export declare class CustomLoader extends nunjucks.Loader {
    options: {
        workingDir: string;
    };
    constructor(options: {
        workingDir: string;
    });
    async: boolean;
    isRelative(filename: string): boolean;
    resolve(from: string, to: string): string;
    getSource(name: string, callback: Callback<Error, LoaderSource>): LoaderSource;
}
export declare class ChatMessageTemplate {
    role: "system" | "user" | "agent" | "tool";
    content?: ChatModelInputMessage["content"];
    name?: string | undefined;
    constructor(role: "system" | "user" | "agent" | "tool", content?: ChatModelInputMessage["content"], name?: string | undefined);
    format(variables?: Record<string, unknown>, options?: FormatOptions): Promise<ChatModelInputMessage>;
}
export declare class SystemMessageTemplate extends ChatMessageTemplate {
    static from(content: string, name?: string): SystemMessageTemplate;
}
export declare class UserMessageTemplate extends ChatMessageTemplate {
    static from(template: ChatModelInputMessageContent, name?: string): UserMessageTemplate;
}
export declare class AgentMessageTemplate extends ChatMessageTemplate {
    toolCalls?: ChatModelOutputToolCall[] | undefined;
    static from(template?: ChatModelInputMessage["content"], toolCalls?: ChatModelOutputToolCall[], name?: string): AgentMessageTemplate;
    constructor(content?: ChatModelInputMessage["content"], toolCalls?: ChatModelOutputToolCall[] | undefined, name?: string);
    format(variables?: Record<string, unknown>, options?: FormatOptions): Promise<{
        toolCalls: ChatModelOutputToolCall[] | undefined;
        role: import("../agents/chat-model.js").Role;
        content?: ChatModelInputMessageContent;
        toolCallId?: string;
        name?: string;
    }>;
}
export declare class ToolMessageTemplate extends ChatMessageTemplate {
    toolCallId: string;
    static from(content: object | string, toolCallId: string, name?: string): ToolMessageTemplate;
    constructor(content: object | string, toolCallId: string, name?: string);
    format(variables?: Record<string, unknown>, options?: FormatOptions): Promise<{
        toolCallId: string;
        role: import("../agents/chat-model.js").Role;
        content?: ChatModelInputMessageContent;
        toolCalls?: {
            id: string;
            type: "function";
            function: {
                name: string;
                arguments: import("../index.js").Message;
            };
        }[];
        name?: string;
    }>;
}
export declare class ChatMessagesTemplate {
    messages: ChatMessageTemplate[];
    static from(messages: ChatMessageTemplate[] | string): ChatMessagesTemplate;
    constructor(messages: ChatMessageTemplate[]);
    format(variables?: Record<string, unknown>, options?: FormatOptions): Promise<ChatModelInputMessage[]>;
}
export declare function parseChatMessages(messages: unknown): ChatMessageTemplate[] | undefined;
