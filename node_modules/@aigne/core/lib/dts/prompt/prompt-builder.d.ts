import type { GetPromptResult } from "@modelcontextprotocol/sdk/types.js";
import { Agent, type AgentInvokeOptions, type Message } from "../agents/agent.js";
import type { AIAgent } from "../agents/ai-agent.js";
import type { ChatModel, ChatModelInput } from "../agents/chat-model.js";
import { ChatMessagesTemplate } from "./template.js";
export interface PromptBuilderOptions {
    instructions?: string | ChatMessagesTemplate;
    workingDir?: string;
}
export interface PromptBuildOptions extends Partial<Pick<AgentInvokeOptions, "context">> {
    agent?: AIAgent;
    input?: Message;
    model?: ChatModel;
    outputSchema?: Agent["outputSchema"];
}
export declare class PromptBuilder {
    static from(instructions: string | {
        path: string;
    } | GetPromptResult, { workingDir }?: {
        workingDir?: string;
    }): PromptBuilder;
    private static fromFile;
    private static fromMCPPromptResult;
    constructor(options?: PromptBuilderOptions);
    instructions?: string | ChatMessagesTemplate;
    workingDir?: string;
    build(options: PromptBuildOptions): Promise<ChatModelInput & {
        toolAgents?: Agent[];
    }>;
    buildImagePrompt(options: Pick<PromptBuildOptions, "input">): Promise<{
        prompt: string;
    }>;
    private buildMessages;
    private convertMemoriesToMessages;
    private buildResponseFormat;
    private buildTools;
}
