import { type ZodType, z } from "zod";
export declare const inputOutputSchema: ({ path }: {
    path: string;
}) => z.ZodUnion<[ZodType<any, z.ZodTypeDef, any>, z.ZodEffects<z.ZodObject<{
    type: z.ZodLiteral<"object">;
    properties: z.ZodRecord<z.ZodString, z.ZodAny>;
    required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    additionalProperties: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "object";
    properties: Record<string, any>;
    required?: string[] | undefined;
    additionalProperties?: boolean | undefined;
}, {
    type: "object";
    properties: Record<string, any>;
    required?: string[] | undefined;
    additionalProperties?: boolean | undefined;
}>, any, {
    type: "object";
    properties: Record<string, any>;
    required?: string[] | undefined;
    additionalProperties?: boolean | undefined;
}>]>;
export declare const defaultInputSchema: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
    $get: z.ZodString;
}, "strip", z.ZodTypeAny, {
    $get: string;
}, {
    $get: string;
}>, z.ZodUnknown]>>;
export declare function optionalize<T>(schema: ZodType<T>): ZodType<T | undefined>;
export declare function camelizeSchema<T extends ZodType>(schema: T, { shallow }?: {
    shallow?: boolean;
}): T;
