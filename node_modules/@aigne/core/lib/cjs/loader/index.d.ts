import { z } from "zod";
import { Agent, type AgentOptions } from "../agents/agent.js";
import type { ChatModel } from "../agents/chat-model.js";
import type { ImageModel } from "../agents/image-model.js";
import type { AIGNEOptions } from "../aigne/aigne.js";
import type { MemoryAgent, MemoryAgentOptions } from "../memory/memory.js";
import { type PromiseOrValue } from "../utils/type-utils.js";
export interface LoadOptions {
    memories?: {
        new (parameters?: MemoryAgentOptions): MemoryAgent;
    }[];
    model?: ChatModel | ((model?: z.infer<typeof aigneFileSchema>["chatModel"]) => PromiseOrValue<ChatModel | undefined>);
    imageModel?: ImageModel | ((model?: z.infer<typeof aigneFileSchema>["imageModel"]) => PromiseOrValue<ImageModel | undefined>);
    key?: string | number;
}
export declare function load(path: string, options?: LoadOptions): Promise<AIGNEOptions>;
export declare function loadAgent(path: string, options?: LoadOptions, agentOptions?: AgentOptions): Promise<Agent>;
declare const aigneFileSchema: z.ZodObject<{
    name: z.ZodType<string | undefined, z.ZodTypeDef, string | undefined>;
    description: z.ZodType<string | undefined, z.ZodTypeDef, string | undefined>;
    chatModel: z.ZodEffects<z.ZodEffects<z.ZodType<string | {
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
    } | undefined, z.ZodTypeDef, string | {
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
    } | undefined>, string | {
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
    } | undefined, unknown>, {
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
    } | undefined, unknown>;
    imageModel: z.ZodEffects<z.ZodType<string | {
        model?: string | undefined;
    } | undefined, z.ZodTypeDef, string | {
        model?: string | undefined;
    } | undefined>, {
        model?: string | undefined;
    } | undefined, string | {
        model?: string | undefined;
    } | undefined>;
    agents: z.ZodType<string[] | undefined, z.ZodTypeDef, string[] | undefined>;
    skills: z.ZodType<string[] | undefined, z.ZodTypeDef, string[] | undefined>;
    mcpServer: z.ZodType<{
        agents?: string[] | undefined;
    } | undefined, z.ZodTypeDef, {
        agents?: string[] | undefined;
    } | undefined>;
    cli: z.ZodType<{
        agents?: string[] | undefined;
        chat?: string | undefined;
    } | undefined, z.ZodTypeDef, {
        agents?: string[] | undefined;
        chat?: string | undefined;
    } | undefined>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    description?: string | undefined;
    skills?: string[] | undefined;
    imageModel?: {
        model?: string | undefined;
    } | undefined;
    agents?: string[] | undefined;
    chatModel?: {
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
    } | undefined;
    mcpServer?: {
        agents?: string[] | undefined;
    } | undefined;
    cli?: {
        agents?: string[] | undefined;
        chat?: string | undefined;
    } | undefined;
}, {
    name?: string | undefined;
    description?: string | undefined;
    skills?: string[] | undefined;
    imageModel?: string | {
        model?: string | undefined;
    } | undefined;
    agents?: string[] | undefined;
    chatModel?: unknown;
    mcpServer?: {
        agents?: string[] | undefined;
    } | undefined;
    cli?: {
        agents?: string[] | undefined;
        chat?: string | undefined;
    } | undefined;
}>;
export declare function loadAIGNEFile(path: string): Promise<{
    aigne: z.infer<typeof aigneFileSchema>;
    rootDir: string;
}>;
export {};
