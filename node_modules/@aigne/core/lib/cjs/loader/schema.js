"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultInputSchema = exports.inputOutputSchema = void 0;
exports.optionalize = optionalize;
exports.camelizeSchema = camelizeSchema;
const index_js_1 = require("@aigne/platform-helpers/nodejs/index.js");
const yaml_1 = require("yaml");
const zod_1 = require("zod");
const agent_js_1 = require("../agents/agent.js");
const camelize_js_1 = require("../utils/camelize.js");
const type_utils_js_1 = require("../utils/type-utils.js");
const inputOutputSchema = ({ path }) => {
    const includeExternalSchema = async (schema) => {
        if (schema?.type === "object" && schema.properties) {
            return {
                ...schema,
                properties: Object.fromEntries(await Promise.all(Object.entries(schema.properties).map(async ([key, value]) => [
                    key,
                    await includeExternalSchema(value),
                ]))),
            };
        }
        if (schema?.type === "array" && schema.items) {
            return { ...schema, items: await includeExternalSchema(schema.items) };
        }
        // Load nested schemas from file
        if (typeof schema === "string") {
            const raw = await index_js_1.nodejs.fs.readFile(index_js_1.nodejs.path.join(index_js_1.nodejs.path.dirname(path), schema), "utf8");
            return nestedJsonSchema.parseAsync((0, yaml_1.parse)(raw));
        }
        return schema;
    };
    const nestedJsonSchema = zod_1.z
        .object({
        type: zod_1.z.string(),
    })
        .passthrough()
        .transform((v) => includeExternalSchema(v));
    const jsonSchemaSchema = zod_1.z
        .object({
        type: zod_1.z.literal("object"),
        properties: zod_1.z.record(zod_1.z.any()),
        required: zod_1.z.array(zod_1.z.string()).optional(),
        additionalProperties: zod_1.z.boolean().optional(),
    })
        .transform((v) => includeExternalSchema(v));
    return zod_1.z.union([
        zod_1.z
            .string()
            .transform((v) => index_js_1.nodejs.fs
            .readFile(index_js_1.nodejs.path.join(index_js_1.nodejs.path.dirname(path), v), "utf8")
            .then((raw) => jsonSchemaSchema.parseAsync((0, yaml_1.parse)(raw)))),
        jsonSchemaSchema,
    ]);
};
exports.inputOutputSchema = inputOutputSchema;
exports.defaultInputSchema = zod_1.z.record(zod_1.z.string(), zod_1.z.union([
    zod_1.z.object({
        [agent_js_1.DEFAULT_INPUT_ACTION_GET]: zod_1.z.string(),
    }),
    zod_1.z.unknown(),
]));
function optionalize(schema) {
    return schema.nullish().transform((v) => v ?? undefined);
}
function camelizeSchema(schema, { shallow = true } = {}) {
    return zod_1.z.preprocess((v) => ((0, type_utils_js_1.isRecord)(v) ? (0, camelize_js_1.camelize)(v, shallow) : v), schema);
}
