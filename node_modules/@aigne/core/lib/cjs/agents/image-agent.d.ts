import { type ZodObject, type ZodType } from "zod";
import { PromptBuilder } from "../prompt/prompt-builder.js";
import { Agent, type AgentInvokeOptions, type AgentOptions, type Message } from "./agent.js";
import { type ImageModel, type ImageModelOutput } from "./image-model.js";
export interface ImageAgentOptions<I extends Message = any, O extends ImageModelOutput = any> extends Omit<AgentOptions<I, O>, "outputSchema"> {
    model?: ImageModel;
    instructions: string | PromptBuilder;
    modelOptions?: Record<string, any>;
}
export declare const imageAgentOptionsSchema: ZodObject<{
    [key in keyof ImageAgentOptions]: ZodType<ImageAgentOptions[key]>;
}>;
export declare class ImageAgent<I extends Message = any, O extends ImageModelOutput = any> extends Agent<I, O> {
    tag: string;
    static from<I extends Message = any, O extends ImageModelOutput = any>(options: ImageAgentOptions<I, O>): ImageAgent<I, O>;
    constructor(options: ImageAgentOptions<I, O>);
    model?: ImageModel;
    instructions: PromptBuilder;
    modelOptions?: Record<string, any>;
    process(input: I, options: AgentInvokeOptions): Promise<O>;
}
