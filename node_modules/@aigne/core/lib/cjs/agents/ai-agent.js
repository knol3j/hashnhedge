"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AIAgent = exports.aiAgentOptionsSchema = exports.aiAgentToolChoiceSchema = exports.AIAgentToolChoice = exports.DEFAULT_OUTPUT_KEY = void 0;
const zod_1 = require("zod");
const prompt_builder_js_1 = require("../prompt/prompt-builder.js");
const structured_stream_instructions_js_1 = require("../prompt/prompts/structured-stream-instructions.js");
const template_js_1 = require("../prompt/template.js");
const structured_stream_extractor_js_1 = require("../utils/structured-stream-extractor.js");
const type_utils_js_1 = require("../utils/type-utils.js");
const agent_js_1 = require("./agent.js");
const types_js_1 = require("./types.js");
exports.DEFAULT_OUTPUT_KEY = "message";
/**
 * Tool choice options for AI agents
 *
 * Controls how the agent decides to use tools during execution
 */
var AIAgentToolChoice;
(function (AIAgentToolChoice) {
    /**
     * Let the model decide when to use tools
     */
    AIAgentToolChoice["auto"] = "auto";
    /**
     * Disable tool usage
     */
    AIAgentToolChoice["none"] = "none";
    /**
     * Force tool usage
     */
    AIAgentToolChoice["required"] = "required";
    /**
     * Choose exactly one tool and route directly to it
     */
    AIAgentToolChoice["router"] = "router";
})(AIAgentToolChoice || (exports.AIAgentToolChoice = AIAgentToolChoice = {}));
/**
 * Zod schema for validating AIAgentToolChoice values
 *
 * Used to ensure that toolChoice receives valid values
 *
 * @hidden
 */
exports.aiAgentToolChoiceSchema = zod_1.z.union([zod_1.z.nativeEnum(AIAgentToolChoice), zod_1.z.custom()], {
    message: `aiAgentToolChoice must be ${Object.values(AIAgentToolChoice).join(", ")}, or an Agent`,
});
/**
 * Zod schema for validating AIAgentOptions
 *
 * Extends the base agent options schema with AI-specific parameters
 *
 * @hidden
 */
exports.aiAgentOptionsSchema = agent_js_1.agentOptionsSchema.extend({
    model: zod_1.z.custom().optional(),
    instructions: zod_1.z.union([zod_1.z.string(), zod_1.z.custom()]).optional(),
    inputKey: zod_1.z.string().optional(),
    outputKey: zod_1.z.string().optional(),
    toolChoice: exports.aiAgentToolChoiceSchema.optional(),
    memoryAgentsAsTools: zod_1.z.boolean().optional(),
    memoryPromptTemplate: zod_1.z.string().optional(),
});
/**
 * AI-powered agent that leverages language models
 *
 * AIAgent connects to language models to process inputs and generate responses,
 * with support for streaming, function calling, and tool usage.
 *
 * Key features:
 * - Connect to any language model
 * - Use customizable instructions and prompts
 * - Execute tools/function calls
 * - Support streaming responses
 * - Router mode for specialized agents
 *
 * @template I The input message type the agent accepts
 * @template O The output message type the agent returns
 *
 * @example
 * Basic AIAgent creation:
 * {@includeCode ../../test/agents/ai-agent.test.ts#example-ai-agent-basic}
 */
class AIAgent extends agent_js_1.Agent {
    tag = "AIAgent";
    /**
     * Create an AIAgent with the specified options
     *
     * Factory method that provides a convenient way to create new AI agents
     *
     * @param options Configuration options for the AI agent
     * @returns A new AIAgent instance
     *
     * @example
     * AI agent with custom instructions:
     * {@includeCode ../../test/agents/ai-agent.test.ts#example-ai-agent-instructions}
     */
    static from(options) {
        return new AIAgent(options);
    }
    /**
     * Create an AIAgent instance
     *
     * @param options Configuration options for the AI agent
     */
    constructor(options) {
        super(options);
        (0, type_utils_js_1.checkArguments)("AIAgent", exports.aiAgentOptionsSchema, options);
        this.model = options.model;
        this.instructions =
            typeof options.instructions === "string"
                ? prompt_builder_js_1.PromptBuilder.from(options.instructions)
                : (options.instructions ?? new prompt_builder_js_1.PromptBuilder());
        this.inputKey = options.inputKey;
        this.outputKey = options.outputKey || exports.DEFAULT_OUTPUT_KEY;
        this.toolChoice = options.toolChoice;
        this.memoryAgentsAsTools = options.memoryAgentsAsTools;
        this.memoryPromptTemplate = options.memoryPromptTemplate;
        this.useMemoriesFromContext = options.useMemoriesFromContext;
        if (typeof options.catchToolsError === "boolean")
            this.catchToolsError = options.catchToolsError;
        this.structuredStreamMode = options.structuredStreamMode;
        this.ignoreTextOfStructuredStreamMode = options.ignoreTextOfStructuredStreamMode;
        this.customStructuredStreamInstructions = options.customStructuredStreamInstructions && {
            ...options.customStructuredStreamInstructions,
            instructions: typeof options.customStructuredStreamInstructions.instructions === "string"
                ? prompt_builder_js_1.PromptBuilder.from(options.customStructuredStreamInstructions.instructions)
                : options.customStructuredStreamInstructions.instructions,
        };
        if (!this.inputKey && !this.instructions) {
            throw new Error("AIAgent requires either inputKey or instructions to be set");
        }
    }
    /**
     * The language model used by this agent
     *
     * If not set on the agent, the model from the context will be used
     */
    model;
    /**
     * Instructions for the language model
     *
     * Contains system messages, user templates, and other prompt elements
     * that guide the model's behavior
     *
     * @example
     * Custom prompt builder:
     * {@includeCode ../../test/agents/ai-agent.test.ts#example-ai-agent-prompt-builder}
     */
    instructions;
    /**
     * Pick a message from input to use as the user's message
     */
    inputKey;
    /**
     * Custom key to use for text output in the response
     *
     * @example
     * Setting a custom output key:
     * {@includeCode ../../test/agents/ai-agent.test.ts#example-ai-agent-custom-output-key}
     */
    outputKey;
    /**
     * Controls how the agent uses tools during execution
     *
     * @example
     * Automatic tool choice:
     * {@includeCode ../../test/agents/ai-agent.test.ts#example-ai-agent-tool-choice-auto}
     *
     * @example
     * Router tool choice:
     * {@includeCode ../../test/agents/ai-agent.test.ts#example-ai-agent-router}
     */
    toolChoice;
    /**
     * Whether to include memory agents as tools for the AI model
     *
     * When set to true, memory agents will be made available as tools
     * that the model can call directly to retrieve or store information.
     * This enables the agent to explicitly interact with its memories.
     */
    memoryAgentsAsTools;
    /**
     * Custom prompt template for formatting memory content
     *
     * Allows customization of how memories are presented to the AI model.
     * If not provided, the default template from MEMORY_MESSAGE_TEMPLATE will be used.
     *
     * The template receives a {{memories}} variable containing serialized memory content.
     */
    memoryPromptTemplate;
    useMemoriesFromContext;
    /**
     * Whether to catch error from tool execution and continue processing.
     * If set to false, the agent will throw an error if a tool fails
     *
     * @default true
     */
    catchToolsError = true;
    /**
     * Whether to enable structured stream mode
     *
     * When enabled, the AI model's streaming response will be processed to extract
     * structured metadata. The model needs to include specific format metadata tags
     * (like <metadata></metadata>) in its response, which will be parsed as JSON
     * objects and passed through the stream.
     *
     * This is useful for scenarios that need to extract structured information
     * (like classifications, scores, tags, etc.) from AI responses.
     *
     * @default false
     */
    structuredStreamMode;
    ignoreTextOfStructuredStreamMode;
    /**
     * Custom structured stream instructions configuration
     *
     * Allows customization of structured stream mode behavior, including:
     * - instructions: Prompt instructions to guide the AI model on how to output structured data
     * - metadataStart: Metadata start marker (e.g., "<metadata>")
     * - metadataEnd: Metadata end marker (e.g., "</metadata>")
     * - parse: Function to parse metadata content, converting raw string to object
     *
     * If not provided, the default STRUCTURED_STREAM_INSTRUCTIONS configuration will be used,
     * which outputs structured data in YAML format within <metadata> tags.
     */
    customStructuredStreamInstructions;
    /**
     * Process an input message and generate a response
     *
     * @protected
     */
    async *process(input, options) {
        const model = this.model ?? options.context.model;
        if (!model)
            throw new Error("model is required to run AIAgent");
        const { toolAgents, ...modelInput } = await this.instructions.build({
            ...options,
            agent: this,
            input,
            model,
        });
        const toolsMap = new Map(toolAgents?.map((i) => [i.name, i]));
        if (this.toolChoice === "router") {
            return yield* this._processRouter(input, model, modelInput, options, toolsMap);
        }
        const toolCallMessages = [];
        const outputKey = this.outputKey;
        for (;;) {
            const modelOutput = {};
            let stream = await options.context.invoke(model, { ...modelInput, messages: modelInput.messages.concat(toolCallMessages) }, { ...options, streaming: true });
            if (this.structuredStreamMode) {
                const { metadataStart, metadataEnd, parse } = this.customStructuredStreamInstructions || structured_stream_instructions_js_1.STRUCTURED_STREAM_INSTRUCTIONS;
                stream = stream.pipeThrough(new structured_stream_extractor_js_1.ExtractMetadataTransform({ start: metadataStart, end: metadataEnd, parse }));
            }
            let isTextIgnored = false;
            for await (const value of stream) {
                if ((0, agent_js_1.isAgentResponseDelta)(value)) {
                    if (!isTextIgnored && value.delta.text?.text) {
                        yield { delta: { text: { [outputKey]: value.delta.text.text } } };
                    }
                    if (value.delta.json) {
                        Object.assign(modelOutput, value.delta.json);
                        if (this.structuredStreamMode) {
                            yield { delta: { json: value.delta.json.json } };
                            if (!isTextIgnored && modelOutput.json && this.ignoreTextOfStructuredStreamMode) {
                                isTextIgnored = this.ignoreTextOfStructuredStreamMode(modelOutput.json);
                            }
                        }
                    }
                }
            }
            const { toolCalls, json, text } = modelOutput;
            if (toolCalls?.length) {
                const executedToolCalls = [];
                // Execute tools
                for (const call of toolCalls) {
                    const tool = toolsMap.get(call.function.name);
                    if (!tool)
                        throw new Error(`Tool not found: ${call.function.name}`);
                    // NOTE: should pass both arguments (model generated) and input (user provided) to the tool
                    const output = await this.invokeSkill(tool, { ...input, ...call.function.arguments }, options).catch((error) => {
                        if (!this.catchToolsError) {
                            return Promise.reject(error);
                        }
                        return {
                            isError: true,
                            error: {
                                message: error.message,
                            },
                        };
                    });
                    // NOTE: Return transfer output immediately
                    if ((0, types_js_1.isTransferAgentOutput)(output)) {
                        return output;
                    }
                    executedToolCalls.push({ call, output });
                }
                // Continue LLM function calling loop if any tools were executed
                if (executedToolCalls.length) {
                    toolCallMessages.push(await template_js_1.AgentMessageTemplate.from(undefined, executedToolCalls.map(({ call }) => call)).format(), ...(await Promise.all(executedToolCalls.map(({ call, output }) => template_js_1.ToolMessageTemplate.from(output, call.id).format()))));
                    continue;
                }
            }
            const result = {};
            if (json) {
                Object.assign(result, json);
            }
            if (text) {
                Object.assign(result, { [outputKey]: text });
            }
            if (!(0, type_utils_js_1.isEmpty)(result)) {
                yield { delta: { json: result } };
            }
            return;
        }
    }
    async onGuideRailError(error) {
        const outputKey = this.outputKey || exports.DEFAULT_OUTPUT_KEY;
        return {
            [outputKey]: error.reason,
        };
    }
    /**
     * Process router mode requests
     *
     * In router mode, the agent sends a single request to the model to determine
     * which tool to use, then routes the request directly to that tool
     *
     * @protected
     */
    async *_processRouter(input, model, modelInput, options, toolsMap) {
        const { toolCalls: [call] = [] } = await options.context.invoke(model, modelInput, {
            ...options,
            streaming: false,
        });
        if (!call) {
            throw new Error("Router toolChoice requires exactly one tool to be executed");
        }
        const tool = toolsMap.get(call.function.name);
        if (!tool)
            throw new Error(`Tool not found: ${call.function.name}`);
        const stream = await options.context.invoke(tool, { ...call.function.arguments, ...input }, { ...options, streaming: true, sourceAgent: this });
        return yield* stream;
    }
}
exports.AIAgent = AIAgent;
