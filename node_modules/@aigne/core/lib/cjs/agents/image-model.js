"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.imageModelOutputSchema = exports.imageModelInputSchema = exports.ImageModel = void 0;
const zod_1 = require("zod");
const agent_js_1 = require("./agent.js");
const chat_model_js_1 = require("./chat-model.js");
class ImageModel extends agent_js_1.Agent {
    tag = "ImageModelAgent";
    constructor(options) {
        super({
            inputSchema: exports.imageModelInputSchema,
            outputSchema: exports.imageModelOutputSchema,
            ...options,
        });
    }
    get credential() {
        return {};
    }
    async preprocess(input, options) {
        super.preprocess(input, options);
        const { limits, usage } = options.context;
        const usedTokens = usage.outputTokens + usage.inputTokens;
        if (limits?.maxTokens && usedTokens >= limits.maxTokens) {
            throw new Error(`Exceeded max tokens ${usedTokens}/${limits.maxTokens}`);
        }
    }
    async postprocess(input, output, options) {
        super.postprocess(input, output, options);
        const { usage } = output;
        if (usage) {
            options.context.usage.outputTokens += usage.outputTokens;
            options.context.usage.inputTokens += usage.inputTokens;
            if (usage.aigneHubCredits)
                options.context.usage.aigneHubCredits += usage.aigneHubCredits;
        }
    }
}
exports.ImageModel = ImageModel;
exports.imageModelInputSchema = zod_1.z.object({
    model: zod_1.z.string().optional(),
    image: zod_1.z
        .union([zod_1.z.string(), zod_1.z.array(zod_1.z.string())])
        .optional()
        .describe("Image URL or base64 string(s) used for editing"),
    prompt: zod_1.z.string(),
    n: zod_1.z.number().int().min(1).optional(),
    responseFormat: zod_1.z.enum(["url", "base64"]).optional(),
});
exports.imageModelOutputSchema = zod_1.z.object({
    images: zod_1.z.array(zod_1.z.union([
        zod_1.z.object({
            url: zod_1.z.string(),
        }),
        zod_1.z.object({
            base64: zod_1.z.string(),
        }),
    ])),
    usage: chat_model_js_1.chatModelOutputUsageSchema.optional(),
    model: zod_1.z.string().optional(),
});
