"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransformAgent = void 0;
const jsonata_1 = __importDefault(require("jsonata"));
const agent_js_1 = require("./agent.js");
/**
 * TransformAgent - A specialized agent for data transformation using JSONata expressions
 *
 * This agent provides a declarative way to transform structured data without writing
 * custom processing logic. It leverages the power of JSONata, a lightweight query and
 * transformation language, to handle complex data manipulations through simple expressions.
 *
 * Common Use Cases:
 * - API response normalization and field mapping
 * - Database query result transformation
 * - Configuration data restructuring
 * - Data format conversion (snake_case â†” camelCase)
 * - Aggregation and calculation operations
 * - Filtering and conditional data processing
 */
class TransformAgent extends agent_js_1.Agent {
    static type = "TransformAgent";
    /**
     * Factory method to create a new TransformAgent instance
     *
     * Provides a convenient way to create TransformAgent instances with proper typing
     *
     * @param options Configuration options for the TransformAgent
     * @returns A new TransformAgent instance
     */
    static from(options) {
        return new TransformAgent(options);
    }
    /**
     * Create a new TransformAgent instance
     *
     * @param options Configuration options including the JSONata expression
     */
    constructor(options) {
        super(options);
        this.jsonata = options.jsonata;
    }
    /**
     * The JSONata expression string used for data transformation
     *
     * This expression is compiled and executed against input data to produce
     * the transformed output. The expression is stored as a string and compiled
     * on each invocation for maximum flexibility.
     */
    jsonata;
    /**
     * Process input data using the configured JSONata expression
     *
     * This method compiles the JSONata expression and evaluates it against the input data.
     *
     * @param input The input message to transform
     * @returns Promise resolving to the transformed output message
     */
    async process(input) {
        const expression = (0, jsonata_1.default)(this.jsonata);
        return await expression.evaluate(input);
    }
}
exports.TransformAgent = TransformAgent;
