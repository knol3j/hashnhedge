"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryRetriever = exports.memoryRetrieverOutputSchema = exports.memoryRetrieverInputSchema = void 0;
const zod_1 = require("zod");
const agent_js_1 = require("../agents/agent.js");
/**
 * @hidden
 */
exports.memoryRetrieverInputSchema = zod_1.z.object({
    limit: zod_1.z.number().optional(),
    search: zod_1.z.union([zod_1.z.string(), zod_1.z.record(zod_1.z.string(), zod_1.z.unknown())]).optional(),
});
/**
 * @hidden
 */
exports.memoryRetrieverOutputSchema = zod_1.z.object({
    memories: zod_1.z.array(zod_1.z.object({
        id: zod_1.z.string(),
        content: zod_1.z.custom(),
        createdAt: zod_1.z.string().datetime(),
    })),
});
/**
 * Abstract base class for agents that retrieve memories from storage.
 *
 * The MemoryRetriever serves as a foundation for implementing specific memory
 * retrieval mechanisms. Implementations of this class are responsible for:
 *
 * 1. Querying a memory storage backend to find relevant memories
 * 2. Filtering memories based on search criteria
 * 3. Limiting the number of results returned
 * 4. Potentially implementing sorting, ranking, or relevance-based retrieval
 *
 * Custom implementations should extend this class and provide concrete
 * implementations of the process method to handle the actual retrieval logic.
 */
class MemoryRetriever extends agent_js_1.Agent {
    tag = "MemoryRetrieverAgent";
    /**
     * Creates a new MemoryRetriever instance with predefined input and output schemas.
     *
     * @param options - Configuration options for the memory retriever agent
     */
    constructor(options) {
        super({
            ...options,
            inputSchema: exports.memoryRetrieverInputSchema,
            outputSchema: exports.memoryRetrieverOutputSchema,
        });
        this._process = options.process;
    }
    _process;
    process(input, options) {
        if (!this._process) {
            throw new Error("MemoryRetriever process function is not implemented.");
        }
        return this._process(input, options);
    }
}
exports.MemoryRetriever = MemoryRetriever;
