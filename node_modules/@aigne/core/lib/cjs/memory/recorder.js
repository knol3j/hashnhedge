"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryRecorder = exports.memoryRecorderOutputSchema = exports.memoryRecorderInputSchema = void 0;
const zod_1 = require("zod");
const agent_js_1 = require("../agents/agent.js");
/**
 * @hidden
 */
exports.memoryRecorderInputSchema = zod_1.z.object({
    content: zod_1.z.array(zod_1.z.object({
        input: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()).optional(),
        output: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()).optional(),
        source: zod_1.z.string().optional(),
    })),
});
/**
 * @hidden
 */
exports.memoryRecorderOutputSchema = zod_1.z.object({
    memories: zod_1.z.array(zod_1.z.object({
        id: zod_1.z.string(),
        content: zod_1.z.custom(),
        createdAt: zod_1.z.string().datetime(),
    })),
});
/**
 * Abstract base class for agents that record and store memories.
 *
 * The MemoryRecorder serves as a foundation for implementing specific memory storage
 * mechanisms. Implementations of this class are responsible for:
 *
 * 1. Converting input content into standardized memory objects
 * 2. Assigning unique IDs to new memories
 * 3. Storing memories in an appropriate backend (database, file system, etc.)
 * 4. Ensuring proper timestamping of memories
 *
 * Custom implementations should extend this class and provide concrete
 * implementations of the process method to handle the actual storage logic.
 */
class MemoryRecorder extends agent_js_1.Agent {
    tag = "MemoryRecorderAgent";
    /**
     * Creates a new MemoryRecorder instance with predefined input and output schemas.
     *
     * @param options - Configuration options for the memory recorder agent
     */
    constructor(options) {
        super({
            ...options,
            inputSchema: exports.memoryRecorderInputSchema,
            outputSchema: exports.memoryRecorderOutputSchema,
        });
        this._process = options.process;
    }
    _process;
    process(input, options) {
        if (!this._process) {
            throw new Error("MemoryRecorder process function is not defined.");
        }
        return this._process(input, options);
    }
}
exports.MemoryRecorder = MemoryRecorder;
