"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtractMetadataTransform = void 0;
const agent_js_1 = require("../agents/agent.js");
class ExtractMetadataTransform extends TransformStream {
    buffer = "";
    cursor = 0;
    state = "none";
    constructor({ start, end, parse, }) {
        super({
            transform: async (chunk, controller) => {
                if ((0, agent_js_1.isAgentResponseDelta)(chunk) && chunk.delta.text?.text) {
                    const text = chunk.delta.text.text;
                    this.buffer += text;
                    for (;;) {
                        if (this.state === "none") {
                            const found = findMatchIndex(this.buffer, this.cursor, start);
                            if (found.start > this.cursor) {
                                let text = this.buffer.slice(this.cursor, found.start);
                                this.cursor = found.start;
                                // Trim trailing whitespace from the text
                                const whitespace = text.match(/(?<whitespace>\s+)$/)?.groups?.whitespace;
                                if (whitespace) {
                                    text = text.slice(0, -whitespace.length);
                                    this.cursor -= whitespace.length;
                                }
                                if (text) {
                                    controller.enqueue({ delta: { text: { text } } });
                                }
                            }
                            if (found.end) {
                                this.state = "start";
                                this.cursor = found.end;
                            }
                        }
                        if (this.state === "start") {
                            const found = findMatchIndex(this.buffer, this.cursor, end);
                            if (found.end) {
                                const metadata = this.buffer.slice(this.cursor, found.start);
                                const json = parse(metadata);
                                controller.enqueue({ delta: { json: { json } } });
                                this.state = "none";
                                this.cursor = found.end;
                                continue;
                            }
                        }
                        break;
                    }
                    return;
                }
                controller.enqueue(chunk);
            },
        });
    }
}
exports.ExtractMetadataTransform = ExtractMetadataTransform;
function findMatchIndex(str, position, match) {
    const i = str.indexOf(match, position);
    if (i >= 0)
        return { start: i, end: i + match.length };
    for (let i = match.length - 1; i > 0; i--) {
        const m = match.slice(0, i);
        if (str.endsWith(m)) {
            return { start: str.length - m.length };
        }
    }
    return { start: str.length };
}
