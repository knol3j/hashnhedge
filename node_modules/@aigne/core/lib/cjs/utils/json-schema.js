"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.outputSchemaToResponseFormatSchema = outputSchemaToResponseFormatSchema;
exports.parseJSON = parseJSON;
exports.ensureZodUnionArray = ensureZodUnionArray;
const zod_to_json_schema_1 = require("zod-to-json-schema");
const logger_js_1 = require("./logger.js");
function outputSchemaToResponseFormatSchema(agentOutput) {
    return setAdditionPropertiesDeep((0, zod_to_json_schema_1.zodToJsonSchema)(agentOutput), false);
}
function setAdditionPropertiesDeep(schema, additionalProperties) {
    if (Array.isArray(schema)) {
        return schema.map((s) => setAdditionPropertiesDeep(s, additionalProperties));
    }
    if (schema !== null && typeof schema === "object" && !Array.isArray(schema)) {
        return Object.entries(schema).reduce((acc, [key, value]) => {
            acc[key] = setAdditionPropertiesDeep(value, additionalProperties);
            if (acc.type === "object") {
                acc.additionalProperties = additionalProperties;
            }
            return acc;
        }, {});
    }
    return schema;
}
function parseJSON(json) {
    try {
        return JSON.parse(json);
    }
    catch (error) {
        logger_js_1.logger.error("Failed to parse JSON", { json, error });
        throw error;
    }
}
/**
 * Ensure that the union array has at least 1 item.
 * NOTE: the zod union requires at least 2 items (just type definition, not runtime behavior)
 * so we need to ensure that the union has at least 1 item.
 * @param union - The union array
 * @returns The union array with at least 1 item (but the type is at least 2 items for z.union)
 */
function ensureZodUnionArray(union) {
    if (!(union.length >= 1)) {
        throw new Error(`Union must have at least 1 item, but got ${union.length}`);
    }
    return union;
}
