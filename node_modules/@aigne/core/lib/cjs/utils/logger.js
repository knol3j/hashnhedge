"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.Logger = exports.LogLevel = void 0;
exports.getLevelFromEnv = getLevelFromEnv;
const index_js_1 = require("@aigne/platform-helpers/nodejs/index.js");
const debug_1 = __importDefault(require("debug"));
var LogLevel;
(function (LogLevel) {
    LogLevel["SILENT"] = "silent";
    LogLevel["ERROR"] = "error";
    LogLevel["WARN"] = "warn";
    LogLevel["INFO"] = "info";
    LogLevel["DEBUG"] = "debug";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
const levels = Object.values(LogLevel);
function getLevelFromEnv(ns) {
    for (const level of [...levels].reverse()) {
        if (debug_1.default.enabled(`${ns}:${level}`)) {
            return level;
        }
    }
}
class Logger {
    options;
    constructor(options) {
        this.options = options;
        this.debugLogger = (0, debug_1.default)(`${options.ns}:${LogLevel.DEBUG}`);
        this.infoLogger = (0, debug_1.default)(`${options.ns}:${LogLevel.INFO}`);
        this.warnLogger = (0, debug_1.default)(`${options.ns}:${LogLevel.WARN}`);
        this.errorLogger = (0, debug_1.default)(`${options.ns}:${LogLevel.ERROR}`);
        this.level = getLevelFromEnv(options.ns) || options.level;
        for (const logger of [this.debugLogger, this.infoLogger, this.warnLogger]) {
            // @ts-ignore
            logger.useColors = index_js_1.nodejs.isStdoutATTY;
            logger.enabled = true;
            logger.log = (...args) => this.logMessage(...args);
        }
        this.errorLogger.log = (...args) => this.logError(...args);
        // @ts-ignore
        this.errorLogger.useColors = index_js_1.nodejs.isStderrATTY;
        this.errorLogger.enabled = true;
    }
    level;
    debugLogger;
    infoLogger;
    warnLogger;
    errorLogger;
    logMessage = console.log;
    logError = console.error;
    debug(message, ...args) {
        if (this.enabled(LogLevel.DEBUG)) {
            this.debugLogger(message, ...args);
        }
    }
    info(message, ...args) {
        if (this.enabled(LogLevel.INFO)) {
            this.infoLogger(message, ...args);
        }
    }
    warn(message, ...args) {
        if (this.enabled(LogLevel.WARN)) {
            this.warnLogger(message, ...args);
        }
    }
    error(message, ...args) {
        if (this.enabled(LogLevel.ERROR)) {
            this.errorLogger(message, ...args);
        }
    }
    enabled(level) {
        return levels.indexOf(this.level) >= levels.indexOf(level);
    }
}
exports.Logger = Logger;
exports.logger = new Logger({
    ns: "aigne:core",
    level: LogLevel.SILENT,
});
