"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toolFromMCPTool = toolFromMCPTool;
exports.promptFromMCPPrompt = promptFromMCPPrompt;
exports.resourceFromMCPResource = resourceFromMCPResource;
const json_schema_to_zod_1 = require("@aigne/json-schema-to-zod");
const uriTemplate_js_1 = require("@modelcontextprotocol/sdk/shared/uriTemplate.js");
const types_js_1 = require("@modelcontextprotocol/sdk/types.js");
const zod_1 = require("zod");
const mcp_agent_js_1 = require("../agents/mcp-agent.js");
const type_utils_js_1 = require("./type-utils.js");
function toolFromMCPTool(tool, options) {
    return new mcp_agent_js_1.MCPTool({
        ...options,
        name: tool.name,
        description: tool.description,
        inputSchema: (0, type_utils_js_1.isEmpty)(tool.inputSchema.properties)
            ? zod_1.z.object({})
            : (0, json_schema_to_zod_1.jsonSchemaToZod)(tool.inputSchema),
        outputSchema: types_js_1.CallToolResultSchema,
    });
}
function promptFromMCPPrompt(prompt, options) {
    return new mcp_agent_js_1.MCPPrompt({
        ...options,
        name: prompt.name,
        description: prompt.description,
        inputSchema: (0, json_schema_to_zod_1.jsonSchemaToZod)({
            type: "object",
            properties: prompt.arguments &&
                Object.fromEntries(prompt.arguments.map((i) => [i.name, { type: "string", description: i.description }])),
            required: prompt.arguments?.filter((i) => i.required).map((i) => i.name),
        }),
        outputSchema: types_js_1.GetPromptResultSchema,
    });
}
function resourceFromMCPResource(resource, options) {
    const [uri, variables] = isResourceTemplate(resource)
        ? [resource.uriTemplate, new uriTemplate_js_1.UriTemplate(resource.uriTemplate).variableNames]
        : [resource.uri, []];
    return new mcp_agent_js_1.MCPResource({
        ...options,
        name: resource.name,
        uri,
        description: resource.description,
        inputSchema: zod_1.z.object(Object.fromEntries(variables.map((i) => [i, zod_1.z.string()]))),
        outputSchema: types_js_1.ReadResourceResultSchema,
    });
}
function isResourceTemplate(resource) {
    return typeof resource.uriTemplate === "string";
}
