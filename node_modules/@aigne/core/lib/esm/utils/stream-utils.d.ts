import { type AgentProcessAsyncGenerator, type AgentResponseChunk, type AgentResponseStream, type Message } from "../agents/agent.js";
import { type PromiseOrValue } from "./type-utils.js";
import "./stream-polyfill.js";
export declare function objectToAgentResponseStream<T extends Message>(json: T): AgentResponseStream<T>;
export declare function mergeAgentResponseChunk<T extends Message>(output: T, chunk: AgentResponseChunk<T>): T;
export declare function agentResponseStreamToObject<T extends Message>(stream: AgentResponseStream<T> | AgentProcessAsyncGenerator<T>): Promise<T>;
export declare function asyncGeneratorToReadableStream<T extends Message>(generator: AgentProcessAsyncGenerator<T>): AgentResponseStream<T>;
export declare function onAgentResponseStreamEnd<T extends Message>(stream: AgentResponseStream<T>, options?: {
    onChunk?: (chunk: AgentResponseChunk<T>) => PromiseOrValue<AgentResponseChunk<T> | undefined | void>;
    onResult?: (result: T) => PromiseOrValue<Partial<T> | undefined | void>;
    onError?: (error: Error) => PromiseOrValue<Error>;
}): AgentResponseStream<T>;
export declare function isAsyncGenerator<T extends AsyncGenerator>(value: AsyncGenerator | unknown): value is T;
export declare function arrayToAgentProcessAsyncGenerator<T extends Message>(chunks: (AgentResponseChunk<T> | Error)[], result?: Partial<T>): AgentProcessAsyncGenerator<T>;
export declare function arrayToReadableStream<T>(chunks: (T | Error)[]): ReadableStream<T>;
export declare function readableStreamToArray<T>(stream: ReadableStream<T>, options: {
    catchError: true;
}): Promise<(T | Error)[]>;
export declare function readableStreamToArray<T>(stream: ReadableStream<T>, options?: {
    catchError?: boolean;
}): Promise<T[]>;
export declare function stringToAgentResponseStream(str: string, key?: "text" | string): AgentResponseStream<Message>;
export declare function toReadableStream(stream: NodeJS.ReadStream): ReadableStream<Uint8Array<ArrayBufferLike>>;
export declare function readAllString(stream: NodeJS.ReadStream | ReadableStream): Promise<string>;
export declare function mergeReadableStreams<T1, T2>(s1: ReadableStream<T1>, s2: ReadableStream<T2>): ReadableStream<T1 | T2>;
export declare function mergeReadableStreams(...streams: (ReadableStream<any> | undefined)[]): ReadableStream<any>;
