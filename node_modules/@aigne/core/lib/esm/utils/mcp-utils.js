import { jsonSchemaToZod } from "@aigne/json-schema-to-zod";
import { UriTemplate } from "@modelcontextprotocol/sdk/shared/uriTemplate.js";
import { CallToolResultSchema, GetPromptResultSchema, ReadResourceResultSchema, } from "@modelcontextprotocol/sdk/types.js";
import { z } from "zod";
import { MCPPrompt, MCPResource, MCPTool } from "../agents/mcp-agent.js";
import { isEmpty } from "./type-utils.js";
export function toolFromMCPTool(tool, options) {
    return new MCPTool({
        ...options,
        name: tool.name,
        description: tool.description,
        inputSchema: isEmpty(tool.inputSchema.properties)
            ? z.object({})
            : jsonSchemaToZod(tool.inputSchema),
        outputSchema: CallToolResultSchema,
    });
}
export function promptFromMCPPrompt(prompt, options) {
    return new MCPPrompt({
        ...options,
        name: prompt.name,
        description: prompt.description,
        inputSchema: jsonSchemaToZod({
            type: "object",
            properties: prompt.arguments &&
                Object.fromEntries(prompt.arguments.map((i) => [i.name, { type: "string", description: i.description }])),
            required: prompt.arguments?.filter((i) => i.required).map((i) => i.name),
        }),
        outputSchema: GetPromptResultSchema,
    });
}
export function resourceFromMCPResource(resource, options) {
    const [uri, variables] = isResourceTemplate(resource)
        ? [resource.uriTemplate, new UriTemplate(resource.uriTemplate).variableNames]
        : [resource.uri, []];
    return new MCPResource({
        ...options,
        name: resource.name,
        uri,
        description: resource.description,
        inputSchema: z.object(Object.fromEntries(variables.map((i) => [i, z.string()]))),
        outputSchema: ReadResourceResultSchema,
    });
}
function isResourceTemplate(resource) {
    return typeof resource.uriTemplate === "string";
}
