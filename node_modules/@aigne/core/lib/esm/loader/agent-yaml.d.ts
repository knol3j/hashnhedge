import { type ZodType } from "zod";
import type { AgentHooks, FunctionAgentFn, TaskRenderMode } from "../agents/agent.js";
import { AIAgentToolChoice } from "../agents/ai-agent.js";
import { ProcessMode, type ReflectionMode } from "../agents/team-agent.js";
export interface HooksSchema {
    priority?: AgentHooks["priority"];
    onStart?: NestAgentSchema;
    onSuccess?: NestAgentSchema;
    onError?: NestAgentSchema;
    onEnd?: NestAgentSchema;
    onSkillStart?: NestAgentSchema;
    onSkillEnd?: NestAgentSchema;
    onHandoff?: NestAgentSchema;
}
export type NestAgentSchema = string | {
    url: string;
    defaultInput?: Record<string, any>;
    hooks?: HooksSchema | HooksSchema[];
} | AgentSchema;
export interface BaseAgentSchema {
    name?: string;
    description?: string;
    taskTitle?: string;
    taskRenderMode?: TaskRenderMode;
    inputSchema?: ZodType<Record<string, any>>;
    defaultInput?: Record<string, any>;
    outputSchema?: ZodType<Record<string, any>>;
    skills?: NestAgentSchema[];
    hooks?: HooksSchema | HooksSchema[];
    memory?: boolean | {
        provider: string;
        subscribeTopic?: string[];
    };
}
export type Instructions = {
    content: string;
    path: string;
};
export interface AIAgentSchema extends BaseAgentSchema {
    type: "ai";
    instructions?: Instructions;
    inputKey?: string;
    outputKey?: string;
    toolChoice?: AIAgentToolChoice;
}
export interface ImageAgentSchema extends BaseAgentSchema {
    type: "image";
    instructions: Instructions;
    modelOptions?: Record<string, any>;
}
export interface MCPAgentSchema extends BaseAgentSchema {
    type: "mcp";
    url?: string;
    command?: string;
    args?: string[];
}
export interface TeamAgentSchema extends BaseAgentSchema {
    type: "team";
    mode?: ProcessMode;
    iterateOn?: string;
    concurrency?: number;
    iterateWithPreviousOutput?: boolean;
    includeAllStepsOutput?: boolean;
    reflection?: Omit<ReflectionMode, "reviewer"> & {
        reviewer: NestAgentSchema;
    };
}
export interface TransformAgentSchema extends BaseAgentSchema {
    type: "transform";
    jsonata: string;
}
export interface FunctionAgentSchema extends BaseAgentSchema {
    type: "function";
    process: FunctionAgentFn;
}
export type AgentSchema = AIAgentSchema | ImageAgentSchema | MCPAgentSchema | TeamAgentSchema | TransformAgentSchema | FunctionAgentSchema;
export declare function parseAgentFile(path: string, data: object): Promise<AgentSchema>;
export declare function loadAgentFromYamlFile(path: string): Promise<AgentSchema>;
