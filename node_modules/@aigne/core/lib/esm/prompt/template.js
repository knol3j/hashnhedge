import { nodejs } from "@aigne/platform-helpers/nodejs/index.js";
import nunjucks from "nunjucks";
import { z } from "zod";
import { isNil } from "../utils/type-utils.js";
nunjucks.runtime.suppressValue = (v) => {
    if (isNil(v))
        return "";
    return typeof v === "object" ? JSON.stringify(v) : v;
};
export class PromptTemplate {
    template;
    static from(template) {
        return new PromptTemplate(template);
    }
    constructor(template) {
        this.template = template;
    }
    async format(variables = {}, options) {
        let env = new nunjucks.Environment();
        if (options?.workingDir) {
            env = new nunjucks.Environment(new CustomLoader({ workingDir: options.workingDir }));
        }
        return new Promise((resolve, reject) => env.renderString(this.template, variables, (err, res) => {
            if (err || !res) {
                reject(err || new Error(`Failed to render template: ${this.template}`));
            }
            else {
                resolve(res);
            }
        }));
    }
}
export class CustomLoader extends nunjucks.Loader {
    options;
    constructor(options) {
        super();
        this.options = options;
    }
    async = true;
    isRelative(filename) {
        return !nodejs.path.isAbsolute(filename);
    }
    resolve(from, to) {
        return nodejs.path.resolve(nodejs.path.dirname(from), to);
    }
    getSource(name, callback) {
        let result = null;
        const path = nodejs.path.isAbsolute(name)
            ? name
            : nodejs.path.join(this.options.workingDir, name);
        nodejs.fs.readFile(path, "utf-8").then((content) => {
            result = {
                src: content,
                path,
                noCache: true,
            };
            callback(null, result);
        }, (error) => {
            callback(error, null);
        });
        // nunjucks expects return LoaderSource synchronously, but we handle it asynchronously.
        return result;
    }
}
export class ChatMessageTemplate {
    role;
    content;
    name;
    constructor(role, content, name) {
        this.role = role;
        this.content = content;
        this.name = name;
    }
    async format(variables, options) {
        let { content } = this;
        if (Array.isArray(content)) {
            content = await Promise.all(content.map(async (i) => {
                if (i.type === "text")
                    return { ...i, text: await PromptTemplate.from(i.text).format(variables, options) };
                return i;
            }));
        }
        else if (typeof content === "string") {
            content = await PromptTemplate.from(content).format(variables, options);
        }
        return {
            role: this.role,
            content,
            name: this.name,
        };
    }
}
export class SystemMessageTemplate extends ChatMessageTemplate {
    static from(content, name) {
        return new SystemMessageTemplate("system", content, name);
    }
}
export class UserMessageTemplate extends ChatMessageTemplate {
    static from(template, name) {
        return new UserMessageTemplate("user", template, name);
    }
}
export class AgentMessageTemplate extends ChatMessageTemplate {
    toolCalls;
    static from(template, toolCalls, name) {
        return new AgentMessageTemplate(template, toolCalls, name);
    }
    constructor(content, toolCalls, name) {
        super("agent", content, name);
        this.toolCalls = toolCalls;
    }
    async format(variables, options) {
        return {
            ...(await super.format(variables, options)),
            toolCalls: this.toolCalls,
        };
    }
}
export class ToolMessageTemplate extends ChatMessageTemplate {
    toolCallId;
    static from(content, toolCallId, name) {
        return new ToolMessageTemplate(content, toolCallId, name);
    }
    constructor(content, toolCallId, name) {
        super("tool", typeof content === "string"
            ? content
            : JSON.stringify(content, (_, value) => typeof value === "bigint" ? value.toString() : value), name);
        this.toolCallId = toolCallId;
    }
    async format(variables, options) {
        return {
            ...(await super.format(variables, options)),
            toolCallId: this.toolCallId,
        };
    }
}
export class ChatMessagesTemplate {
    messages;
    static from(messages) {
        return new ChatMessagesTemplate(typeof messages === "string" ? [UserMessageTemplate.from(messages)] : messages);
    }
    constructor(messages) {
        this.messages = messages;
    }
    async format(variables, options) {
        return Promise.all(this.messages.map((message) => message.format(variables, options)));
    }
}
const systemChatMessageSchema = z.object({
    role: z.literal("system"),
    content: z.string(),
    name: z.string().optional(),
});
const userChatMessageSchema = z.object({
    role: z.literal("user"),
    content: z.string(),
    name: z.string().optional(),
});
const chatModelOutputToolCallSchema = z.object({
    id: z.string(),
    type: z.literal("function"),
    function: z.object({
        name: z.string(),
        arguments: z.record(z.string(), z.unknown()),
    }),
});
const agentChatMessageSchema = z.object({
    role: z.literal("agent"),
    content: z.string().optional(),
    toolCalls: z.array(chatModelOutputToolCallSchema).optional(),
    name: z.string().optional(),
});
const toolChatMessageSchema = z.object({
    role: z.literal("tool"),
    content: z
        .union([z.string(), z.record(z.string(), z.unknown())])
        .transform((val) => (typeof val !== "string" ? JSON.stringify(val) : val)),
    toolCallId: z.string(),
    name: z.string().optional(),
});
const chatMessageSchema = z.union([
    systemChatMessageSchema,
    userChatMessageSchema,
    agentChatMessageSchema,
    toolChatMessageSchema,
]);
const chatMessagesSchema = z.array(chatMessageSchema);
export function parseChatMessages(messages) {
    const result = chatMessagesSchema.safeParse(messages);
    if (!result.success)
        return undefined;
    return result.data.map((message) => {
        switch (message.role) {
            case "system":
                return SystemMessageTemplate.from(message.content, message.name);
            case "user":
                return UserMessageTemplate.from(message.content, message.name);
            case "agent":
                return AgentMessageTemplate.from(message.content, message.toolCalls, message.name);
            case "tool":
                return ToolMessageTemplate.from(message.content, message.toolCallId, message.name);
        }
    });
}
