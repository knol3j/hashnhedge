import { z } from "zod";
import { Agent, } from "../agents/agent.js";
/**
 * @hidden
 */
export const memoryRecorderInputSchema = z.object({
    content: z.array(z.object({
        input: z.record(z.string(), z.unknown()).optional(),
        output: z.record(z.string(), z.unknown()).optional(),
        source: z.string().optional(),
    })),
});
/**
 * @hidden
 */
export const memoryRecorderOutputSchema = z.object({
    memories: z.array(z.object({
        id: z.string(),
        content: z.custom(),
        createdAt: z.string().datetime(),
    })),
});
/**
 * Abstract base class for agents that record and store memories.
 *
 * The MemoryRecorder serves as a foundation for implementing specific memory storage
 * mechanisms. Implementations of this class are responsible for:
 *
 * 1. Converting input content into standardized memory objects
 * 2. Assigning unique IDs to new memories
 * 3. Storing memories in an appropriate backend (database, file system, etc.)
 * 4. Ensuring proper timestamping of memories
 *
 * Custom implementations should extend this class and provide concrete
 * implementations of the process method to handle the actual storage logic.
 */
export class MemoryRecorder extends Agent {
    tag = "MemoryRecorderAgent";
    /**
     * Creates a new MemoryRecorder instance with predefined input and output schemas.
     *
     * @param options - Configuration options for the memory recorder agent
     */
    constructor(options) {
        super({
            ...options,
            inputSchema: memoryRecorderInputSchema,
            outputSchema: memoryRecorderOutputSchema,
        });
        this._process = options.process;
    }
    _process;
    process(input, options) {
        if (!this._process) {
            throw new Error("MemoryRecorder process function is not defined.");
        }
        return this._process(input, options);
    }
}
