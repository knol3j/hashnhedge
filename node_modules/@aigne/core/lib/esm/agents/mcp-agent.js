import { createStdioClientTransport } from "@aigne/platform-helpers/mcp/stdio-client-transport.js";
import { nodejs } from "@aigne/platform-helpers/nodejs/index.js";
import { Client } from "@modelcontextprotocol/sdk/client/index.js";
import { SSEClientTransport, } from "@modelcontextprotocol/sdk/client/sse.js";
import { StreamableHTTPClientTransport, } from "@modelcontextprotocol/sdk/client/streamableHttp.js";
import { UriTemplate } from "@modelcontextprotocol/sdk/shared/uriTemplate.js";
import { z } from "zod";
import { logger } from "../utils/logger.js";
import { promptFromMCPPrompt, resourceFromMCPResource, toolFromMCPTool, } from "../utils/mcp-utils.js";
import { checkArguments, createAccessorArray } from "../utils/type-utils.js";
import { Agent } from "./agent.js";
const MCP_AGENT_CLIENT_NAME = "AIGNE/MCPAgent";
const MCP_AGENT_CLIENT_VERSION = "1.10.0"; // This should match the version in package.json
const DEFAULT_MAX_RECONNECTS = 10;
const DEFAULT_TIMEOUT = () => z.coerce
    .number()
    .int()
    .min(0)
    .safeParse(nodejs.env.MCP_TIMEOUT || nodejs.env.TIMEOUT).data || 60e3;
function isSSEServerParameters(options) {
    return "url" in options && typeof options.url === "string";
}
function isStdioServerParameters(options) {
    return "command" in options && typeof options.command === "string";
}
function getMCPServerString(options) {
    if (isSSEServerParameters(options)) {
        return options.url;
    }
    if (isStdioServerParameters(options)) {
        return `${options.command} ${options.args?.join(" ") || ""}`;
    }
    return "unknown";
}
/**
 * MCPAgent is a specialized agent for interacting with MCP (Model Context Protocol) servers.
 * It provides the ability to connect to remote MCP servers using different transport methods,
 * and access their tools, prompts, and resources.
 *
 * MCPAgent serves as a bridge between your application and MCP servers, allowing you to:
 * - Connect to MCP servers over HTTP/SSE or stdio
 * - Access server tools as agent skills
 * - Utilize server prompts and resources
 * - Manage server connections with automatic reconnection
 *
 * @example
 * Here's an example of creating an MCPAgent with SSE transport:
 * {@includeCode ../../test/agents/mcp-agent.test.ts#example-mcp-agent-from-sse}
 */
export class MCPAgent extends Agent {
    tag = "MCPAgent";
    static from(options) {
        checkArguments("MCPAgent.from", mcpAgentOptionsSchema, options);
        if (isSSEServerParameters(options)) {
            const transport = () => {
                if (options.transport === "streamableHttp") {
                    return new StreamableHTTPClientTransport(new URL(options.url), options.opts);
                }
                return new SSEClientTransport(new URL(options.url), options.opts);
            };
            return MCPAgent.fromTransport(transport, options);
        }
        if (isStdioServerParameters(options)) {
            const transport = async () => createStdioClientTransport(options);
            return MCPAgent.fromTransport(transport, options);
        }
        return new MCPAgent(options);
    }
    static async fromTransport(transportCreator, options) {
        const client = new ClientWithReconnect({
            name: MCP_AGENT_CLIENT_NAME,
            version: MCP_AGENT_CLIENT_VERSION,
        }, undefined, isSSEServerParameters(options) ? { transportCreator, ...options } : undefined);
        const transport = await transportCreator();
        logger.debug(`Connecting to MCP server: ${getMCPServerString(options)}`);
        await client.connect(transport);
        const mcpServer = getMCPServerName(client);
        const { tools: isToolsAvailable, prompts: isPromptsAvailable, resources: isResourcesAvailable, } = client.getServerCapabilities() ?? {};
        logger.debug(`Listing tools from ${mcpServer}`);
        const skills = isToolsAvailable
            ? await client.listTools().then(({ tools }) => {
                logger.debug(`Listing tools from ${mcpServer} completed %O`, tools?.map((i) => i.name));
                return tools.map((tool) => toolFromMCPTool(tool, { client }));
            })
            : undefined;
        logger.debug(`Listing prompts from ${mcpServer}`);
        const prompts = isPromptsAvailable
            ? await client.listPrompts().then(({ prompts }) => {
                logger.debug(`Listing prompts from ${mcpServer} completed %O`, prompts?.map((i) => i.name));
                return prompts.map((prompt) => promptFromMCPPrompt(prompt, { client }));
            })
            : undefined;
        logger.debug(`Listing resources from ${mcpServer}`);
        // TODO: should conditionally call listResourceTemplates based on the server capabilities
        // but the capability is not correct in the current SDK version
        const resources = isResourcesAvailable
            ? await Promise.all([
                client.listResources().catch(() => ({ resources: [] })),
                client.listResourceTemplates().catch(() => ({ resourceTemplates: [] })),
            ]).then(([{ resources }, { resourceTemplates }]) => {
                const result = [...resources, ...resourceTemplates].map((resource) => resourceFromMCPResource(resource, { client }));
                logger.debug(`Listing resources from ${mcpServer} completed %O`, result.map((i) => i.name));
                return result;
            })
            : undefined;
        return new MCPAgent({
            name: client.getServerVersion()?.name,
            client,
            skills,
            prompts,
            resources,
        });
    }
    /**
     * Create an MCPAgent instance directly with a configured client.
     *
     * @param options MCPAgent configuration options, including client instance
     *
     * @example
     * Here's an example of creating an MCPAgent with an existing client:
     * {@includeCode ../../test/agents/mcp-agent.test.ts#example-mcp-agent-direct}
     */
    constructor(options) {
        super(options);
        this.client = options.client;
        if (options.prompts?.length)
            this.prompts.push(...options.prompts);
        if (options.resources?.length)
            this.resources.push(...options.resources);
    }
    /**
     * The MCP client instance used for communication with the MCP server.
     *
     * This client manages the connection to the MCP server and provides
     * methods for interacting with server-provided functionality.
     */
    client;
    /**
     * Array of MCP prompts available from the connected server.
     *
     * Prompts can be accessed by index or by name.
     *
     * @example
     * Here's an example of accessing prompts:
     * {@includeCode ../../test/agents/mcp-agent.test.ts#example-mcp-agent-prompts}
     */
    prompts = createAccessorArray([], (arr, name) => arr.find((i) => i.name === name));
    /**
     * Array of MCP resources available from the connected server.
     *
     * Resources can be accessed by index or by name.
     *
     * @example
     * Here's an example of accessing resources:
     * {@includeCode ../../test/agents/mcp-agent.test.ts#example-mcp-agent-resources}
     */
    resources = createAccessorArray([], (arr, name) => arr.find((i) => i.name === name));
    /**
     * Check if the agent is invokable.
     *
     * MCPAgent itself is not directly invokable as it acts as a container
     * for tools, prompts, and resources. Always returns false.
     */
    get isInvokable() {
        return false;
    }
    /**
     * Process method required by Agent interface.
     *
     * Since MCPAgent itself is not directly invokable, this method
     * throws an error if called.
     *
     * @param _input Input message (unused)
     * @param _options AgentInvokeOptions (unused)
     * @throws Error This method always throws an error since MCPAgent is not directly invokable
     */
    async process(_input, _options) {
        throw new Error("Method not implemented.");
    }
    /**
     * Shut down the agent and close the MCP connection.
     *
     * This method cleans up resources and closes the connection
     * to the MCP server.
     *
     * @example
     * Here's an example of shutting down an MCPAgent:
     * {@includeCode ../../test/agents/mcp-agent.test.ts#example-mcp-agent-shutdown}
     *
     * @example
     * Here's an example of shutting down an MCPAgent by using statement:
     * {@includeCode ../../test/agents/mcp-agent.test.ts#example-mcp-agent-shutdown-by-using}
     */
    async shutdown() {
        await super.shutdown();
        await this.client.close();
    }
}
class ClientWithReconnect extends Client {
    reconnectOptions;
    constructor(info, options, reconnectOptions) {
        super(info, options);
        this.reconnectOptions = reconnectOptions;
    }
    shouldReconnect(error) {
        const { transportCreator, shouldReconnect, maxReconnects } = this.reconnectOptions || {};
        if (!transportCreator || maxReconnects === 0)
            return false;
        if (!shouldReconnect)
            return true; // default to reconnect on all errors
        return shouldReconnect(error);
    }
    async reconnect() {
        const transportCreator = this.reconnectOptions?.transportCreator;
        if (!transportCreator)
            throw new Error("reconnect requires a transportCreator");
        const retry = await import("p-retry");
        await retry.default(async () => {
            await this.close();
            await this.connect(await transportCreator(), {
                timeout: this.reconnectOptions?.timeout ?? DEFAULT_TIMEOUT(),
            });
        }, {
            retries: this.reconnectOptions?.maxReconnects ?? DEFAULT_MAX_RECONNECTS,
            shouldRetry: this.shouldReconnect,
            onFailedAttempt: (error) => logger.error("Reconnect attempt failed: %O", error),
        });
    }
    async request(request, resultSchema, options) {
        const mergedOptions = {
            ...options,
            timeout: options?.timeout ?? DEFAULT_TIMEOUT(),
        };
        try {
            return await super.request(request, resultSchema, mergedOptions);
        }
        catch (error) {
            if (this.shouldReconnect(error)) {
                logger.error("Error occurred, reconnecting to MCP server: %O", error);
                await this.reconnect();
                return await super.request(request, resultSchema, mergedOptions);
            }
            throw error;
        }
    }
}
export class MCPBase extends Agent {
    tag = "MCPBase";
    constructor(options) {
        super(options);
        this.client = options.client;
    }
    client;
}
export class MCPTool extends MCPBase {
    tag = "MCPTool";
    async process(input) {
        const result = await this.client.callTool({ name: this.name, arguments: input });
        return result;
    }
}
export class MCPPrompt extends MCPBase {
    tag = "MCPPrompt";
    async process(input) {
        const result = await this.client.getPrompt({ name: this.name, arguments: input });
        return result;
    }
}
export class MCPResource extends MCPBase {
    tag = "MCPResource";
    constructor(options) {
        super(options);
        this.uri = options.uri;
    }
    uri;
    async process(input) {
        const uri = new UriTemplate(this.uri).expand(input);
        const result = await this.client.readResource({ uri });
        return result;
    }
}
function getMCPServerName(client) {
    const info = client.getServerVersion();
    if (!info)
        return undefined;
    const { name, version } = info;
    return `${name}@${version}`;
}
const mcpAgentOptionsSchema = z.union([
    z.object({
        client: z.instanceof(Client),
        prompts: z.array(z.instanceof(MCPPrompt)).optional(),
        resources: z.array(z.instanceof(MCPResource)).optional(),
    }),
    z.object({
        url: z.string(),
        opts: z.object({}).optional(),
        timeout: z.number().optional(),
        maxReconnects: z.number().optional(),
        shouldReconnect: z.custom().optional(),
    }),
    z.object({
        command: z.string(),
        args: z.array(z.string()).optional(),
        env: z.record(z.string(), z.string()).optional(),
    }),
]);
