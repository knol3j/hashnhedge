import { z } from "zod";
import { Agent, } from "./agent.js";
import { chatModelOutputUsageSchema } from "./chat-model.js";
export class ImageModel extends Agent {
    tag = "ImageModelAgent";
    constructor(options) {
        super({
            inputSchema: imageModelInputSchema,
            outputSchema: imageModelOutputSchema,
            ...options,
        });
    }
    get credential() {
        return {};
    }
    async preprocess(input, options) {
        super.preprocess(input, options);
        const { limits, usage } = options.context;
        const usedTokens = usage.outputTokens + usage.inputTokens;
        if (limits?.maxTokens && usedTokens >= limits.maxTokens) {
            throw new Error(`Exceeded max tokens ${usedTokens}/${limits.maxTokens}`);
        }
    }
    async postprocess(input, output, options) {
        super.postprocess(input, output, options);
        const { usage } = output;
        if (usage) {
            options.context.usage.outputTokens += usage.outputTokens;
            options.context.usage.inputTokens += usage.inputTokens;
            if (usage.aigneHubCredits)
                options.context.usage.aigneHubCredits += usage.aigneHubCredits;
        }
    }
}
export const imageModelInputSchema = z.object({
    model: z.string().optional(),
    image: z
        .union([z.string(), z.array(z.string())])
        .optional()
        .describe("Image URL or base64 string(s) used for editing"),
    prompt: z.string(),
    n: z.number().int().min(1).optional(),
    responseFormat: z.enum(["url", "base64"]).optional(),
});
export const imageModelOutputSchema = z.object({
    images: z.array(z.union([
        z.object({
            url: z.string(),
        }),
        z.object({
            base64: z.string(),
        }),
    ])),
    usage: chatModelOutputUsageSchema.optional(),
    model: z.string().optional(),
});
