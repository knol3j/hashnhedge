import z from "zod";
import { PromptBuilder } from "../prompt/prompt-builder.js";
import { checkArguments } from "../utils/type-utils.js";
import { Agent, agentOptionsSchema, } from "./agent.js";
import { imageModelOutputSchema } from "./image-model.js";
export const imageAgentOptionsSchema = agentOptionsSchema.extend({
    model: z.custom().optional(),
    instructions: z.union([z.string(), z.custom()]),
    modelOptions: z.record(z.any()).optional(),
});
export class ImageAgent extends Agent {
    tag = "ImageAgent";
    static from(options) {
        return new ImageAgent(options);
    }
    constructor(options) {
        super({ ...options, outputSchema: imageModelOutputSchema });
        checkArguments("ImageAgent", imageAgentOptionsSchema, options);
        this.model = options.model;
        this.instructions =
            typeof options.instructions === "string"
                ? PromptBuilder.from(options.instructions)
                : options.instructions;
        this.modelOptions = options.modelOptions;
    }
    model;
    instructions;
    modelOptions;
    async process(input, options) {
        const model = this.model ?? options.context.imageModel;
        if (!model)
            throw new Error("image model is required to run ImageAgent");
        const { prompt } = await this.instructions.buildImagePrompt({ input });
        return (await options.context.invoke(model, { ...input, ...this.modelOptions, prompt }, { ...options, streaming: false }));
    }
}
