import type { Context } from "../aigne/context.js";
import { type MessagePayload } from "../aigne/message-queue.js";
import { Agent, type AgentInvokeOptions, type AgentOptions, type AgentProcessResult, type FunctionAgentFn, type Message } from "./agent.js";
export interface UserAgentOptions<I extends Message = Message, O extends Message = Message> extends AgentOptions<I, O> {
    context: Context;
    process?: FunctionAgentFn<I, O>;
    activeAgent?: Agent;
}
export declare class UserAgent<I extends Message = Message, O extends Message = Message> extends Agent<I, O> {
    tag: string;
    static from<I extends Message, O extends Message>(options: UserAgentOptions<I, O>): UserAgent<I, O>;
    constructor(options: UserAgentOptions<I, O>);
    context: Context;
    private _process?;
    private activeAgent?;
    protected subscribeToTopics(context: Pick<Context, "subscribe">): void;
    protected publishToTopics(output: O, options: AgentInvokeOptions): Promise<void>;
    invoke: Agent<I, O>["invoke"];
    process(input: I, options: AgentInvokeOptions): Promise<AgentProcessResult<O>>;
    publish: Context["publish"];
    subscribe: Context["subscribe"];
    unsubscribe: Context["unsubscribe"];
    get stream(): ReadableStream<MessagePayload & {
        topic: string;
    }>;
    protected checkAgentInvokesUsage(_options: AgentInvokeOptions): void;
}
