"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdeogramImageModel = void 0;
const core_1 = require("@aigne/core");
const camelize_js_1 = require("@aigne/core/utils/camelize.js");
const type_utils_js_1 = require("@aigne/core/utils/type-utils.js");
const ufo_1 = require("ufo");
const zod_1 = require("zod");
const IDEOGRAM_BASE_URL = "https://api.ideogram.ai";
const ideogramImageModelInputSchema = core_1.imageModelInputSchema.extend({});
const ideogramImageModelOptionsSchema = zod_1.z.object({
    apiKey: zod_1.z.string().optional(),
    baseURL: zod_1.z.string().optional(),
    model: zod_1.z.string().optional(),
    modelOptions: zod_1.z.object({}).optional(),
});
class IdeogramImageModel extends core_1.ImageModel {
    options;
    constructor(options) {
        super({
            ...options,
            inputSchema: ideogramImageModelInputSchema,
            description: options?.description ?? "Draw or edit image by Ideogram image models",
        });
        this.options = options;
        if (options)
            (0, type_utils_js_1.checkArguments)(this.name, ideogramImageModelOptionsSchema, options);
    }
    apiKeyEnvName = "IDEOGRAM_API_KEY";
    get credential() {
        return {
            url: this.options?.baseURL || process.env.IDEOGRAM_BASE_URL || IDEOGRAM_BASE_URL,
            apiKey: this.options?.apiKey || process.env[this.apiKeyEnvName],
        };
    }
    get modelOptions() {
        return this.options?.modelOptions;
    }
    /**
     * Process the input and generate a response
     * @param input The input to process
     * @returns The generated response
     */
    async process(input) {
        const model = input.model;
        const formData = new FormData();
        if (model !== "ideogram-v3") {
            throw new Error(`${this.name} only support ideogram-v3`);
        }
        const inputKeys = [
            "prompt",
            "seed",
            "resolution",
            "aspectRatio",
            "renderingSpeed",
            "magicPrompt",
            "negativePrompt",
            "colorPalette",
            "styleCodes",
            "styleType",
        ];
        const mergedInput = (0, camelize_js_1.snakelize)((0, type_utils_js_1.pick)({ ...this.modelOptions, ...input }, inputKeys));
        if (input.n) {
            formData.append("num_images", input.n.toString());
        }
        Object.keys(mergedInput).forEach((key) => {
            if (mergedInput[key]) {
                formData.append(key, mergedInput[key]);
            }
        });
        const { url, apiKey } = this.credential;
        if (!apiKey)
            throw new Error(`${this.name} requires an API key. Please provide it via \`options.apiKey\`, or set the \`${this.apiKeyEnvName}\` environment variable`);
        const response = await fetch((0, ufo_1.joinURL)(new URL(url).origin, `/v1/${model}/generate`), {
            method: "POST",
            headers: { "api-key": apiKey },
            body: formData,
        });
        if (!response.ok) {
            const error = await response.text();
            throw new Error(`Ideogram API error: ${response.status} ${response.statusText} ${error}`);
        }
        const data = await response.json();
        return {
            images: data.data.map((item) => ({ url: item.url })),
            usage: {
                inputTokens: 0,
                outputTokens: 0,
            },
            model,
        };
    }
}
exports.IdeogramImageModel = IdeogramImageModel;
