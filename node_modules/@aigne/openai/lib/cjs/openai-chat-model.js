"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAIChatModel = exports.openAIChatModelOptionsSchema = void 0;
exports.contentsFromInputMessages = contentsFromInputMessages;
exports.toolsFromInputTools = toolsFromInputTools;
exports.jsonSchemaToOpenAIJsonSchema = jsonSchemaToOpenAIJsonSchema;
const core_1 = require("@aigne/core");
const logger_js_1 = require("@aigne/core/utils/logger.js");
const model_utils_js_1 = require("@aigne/core/utils/model-utils.js");
const prompts_js_1 = require("@aigne/core/utils/prompts.js");
const stream_utils_js_1 = require("@aigne/core/utils/stream-utils.js");
const type_utils_js_1 = require("@aigne/core/utils/type-utils.js");
const ajv_1 = require("ajv");
const uuid_1 = require("uuid");
const zod_1 = require("zod");
const openai_js_1 = require("./openai.js");
const CHAT_MODEL_OPENAI_DEFAULT_MODEL = "gpt-4o-mini";
const OPENAI_CHAT_MODEL_CAPABILITIES = {
    "o4-mini": { supportsParallelToolCalls: false, supportsTemperature: false },
    "o3-mini": { supportsParallelToolCalls: false, supportsTemperature: false },
};
/**
 * @hidden
 */
exports.openAIChatModelOptionsSchema = zod_1.z.object({
    apiKey: zod_1.z.string().optional(),
    baseURL: zod_1.z.string().optional(),
    model: zod_1.z.string().optional(),
    modelOptions: zod_1.z
        .object({
        model: zod_1.z.string().optional(),
        temperature: zod_1.z.number().optional(),
        topP: zod_1.z.number().optional(),
        frequencyPenalty: zod_1.z.number().optional(),
        presencePenalty: zod_1.z.number().optional(),
        parallelToolCalls: zod_1.z.boolean().optional().default(true),
    })
        .optional(),
});
/**
 * Implementation of the ChatModel interface for OpenAI's API
 *
 * This model provides access to OpenAI's capabilities including:
 * - Text generation
 * - Tool use with parallel tool calls
 * - JSON structured output
 * - Image understanding
 *
 * Default model: 'gpt-4o-mini'
 *
 * @example
 * Here's how to create and use an OpenAI chat model:
 * {@includeCode ../test/openai-chat-model.test.ts#example-openai-chat-model}
 *
 * @example
 * Here's an example with streaming response:
 * {@includeCode ../test/openai-chat-model.test.ts#example-openai-chat-model-stream}
 */
class OpenAIChatModel extends core_1.ChatModel {
    options;
    constructor(options) {
        super();
        this.options = options;
        if (options)
            (0, type_utils_js_1.checkArguments)(this.name, exports.openAIChatModelOptionsSchema, options);
        const preset = options?.model ? OPENAI_CHAT_MODEL_CAPABILITIES[options.model] : undefined;
        Object.assign(this, preset);
    }
    /**
     * @hidden
     */
    _client;
    apiKeyEnvName = "OPENAI_API_KEY";
    apiKeyDefault;
    supportsNativeStructuredOutputs = true;
    supportsToolsUseWithJsonSchema = true;
    supportsParallelToolCalls = true;
    supportsToolsEmptyParameters = true;
    supportsToolStreaming = true;
    supportsTemperature = true;
    get client() {
        const { apiKey, url } = this.credential;
        if (!apiKey)
            throw new Error(`${this.name} requires an API key. Please provide it via \`options.apiKey\`, or set the \`${this.apiKeyEnvName}\` environment variable`);
        this._client ??= new openai_js_1.CustomOpenAI({
            baseURL: url,
            apiKey,
            ...this.options?.clientOptions,
        });
        return this._client;
    }
    get credential() {
        return {
            url: this.options?.baseURL || process.env.OPENAI_BASE_URL,
            apiKey: this.options?.apiKey || process.env[this.apiKeyEnvName] || this.apiKeyDefault,
            model: this.options?.model || CHAT_MODEL_OPENAI_DEFAULT_MODEL,
        };
    }
    get modelOptions() {
        return this.options?.modelOptions;
    }
    /**
     * Process the input and generate a response
     * @param input The input to process
     * @returns The generated response
     */
    process(input) {
        return this._process(input);
    }
    ajv = new ajv_1.Ajv();
    async _process(input) {
        const messages = await this.getRunMessages(input);
        const model = input.modelOptions?.model || this.credential.model;
        const body = {
            model,
            temperature: this.supportsTemperature
                ? (input.modelOptions?.temperature ?? this.modelOptions?.temperature)
                : undefined,
            top_p: input.modelOptions?.topP ?? this.modelOptions?.topP,
            frequency_penalty: input.modelOptions?.frequencyPenalty ?? this.modelOptions?.frequencyPenalty,
            presence_penalty: input.modelOptions?.presencePenalty ?? this.modelOptions?.presencePenalty,
            messages,
            stream_options: {
                include_usage: true,
            },
            stream: true,
        };
        // For models that do not support tools use with JSON schema in same request,
        // so we need to handle the case where tools are not used and responseFormat is json
        if (!input.tools?.length && input.responseFormat?.type === "json_schema") {
            return await this.requestStructuredOutput(body, input.responseFormat);
        }
        const { jsonMode, responseFormat } = await this.getRunResponseFormat(input);
        const stream = (await this.client.chat.completions.create({
            ...body,
            tools: toolsFromInputTools(input.tools, {
                addTypeToEmptyParameters: !this.supportsToolsEmptyParameters,
            }),
            tool_choice: input.toolChoice,
            parallel_tool_calls: this.getParallelToolCalls(input),
            response_format: responseFormat,
        }));
        if (input.responseFormat?.type !== "json_schema") {
            return await this.extractResultFromStream(stream, false, true);
        }
        const result = await this.extractResultFromStream(stream, jsonMode);
        // Just return the result if it has tool calls
        if (result.toolCalls?.length || result.json)
            return result;
        // Try to parse the text response as JSON
        // If it matches the json_schema, return it as json
        const json = (0, core_1.safeParseJSON)(result.text || "");
        if (this.ajv.validate(input.responseFormat.jsonSchema.schema, json)) {
            return { ...result, json, text: undefined };
        }
        logger_js_1.logger.warn(`${this.name}: Text response does not match JSON schema, trying to use tool to extract json `, {
            text: result.text,
        });
        const output = await this.requestStructuredOutput(body, input.responseFormat);
        return { ...output, usage: (0, model_utils_js_1.mergeUsage)(result.usage, output.usage) };
    }
    getParallelToolCalls(input) {
        if (!this.supportsParallelToolCalls)
            return undefined;
        if (!input.tools?.length)
            return undefined;
        return input.modelOptions?.parallelToolCalls ?? this.modelOptions?.parallelToolCalls;
    }
    async getRunMessages(input) {
        const messages = await contentsFromInputMessages(input.messages);
        if (input.responseFormat?.type === "json_schema") {
            if (!this.supportsNativeStructuredOutputs ||
                (!this.supportsToolsUseWithJsonSchema && input.tools?.length)) {
                messages.unshift({
                    role: "system",
                    content: (0, prompts_js_1.getJsonOutputPrompt)(input.responseFormat.jsonSchema.schema),
                });
            }
        }
        return messages;
    }
    async getRunResponseFormat(input) {
        if (!this.supportsToolsUseWithJsonSchema && input.tools?.length)
            return { jsonMode: false, responseFormat: undefined };
        if (!this.supportsNativeStructuredOutputs) {
            const jsonMode = input.responseFormat?.type === "json_schema";
            return {
                jsonMode,
                responseFormat: jsonMode ? { type: "json_object" } : undefined,
            };
        }
        if (input.responseFormat?.type === "json_schema") {
            return {
                jsonMode: true,
                responseFormat: {
                    type: "json_schema",
                    json_schema: {
                        ...input.responseFormat.jsonSchema,
                        schema: jsonSchemaToOpenAIJsonSchema(input.responseFormat.jsonSchema.schema),
                    },
                },
            };
        }
        return { jsonMode: false, responseFormat: undefined };
    }
    async requestStructuredOutput(body, responseFormat) {
        if (responseFormat?.type !== "json_schema") {
            throw new Error("Expected json_schema response format");
        }
        const { jsonMode, responseFormat: resolvedResponseFormat } = await this.getRunResponseFormat({
            responseFormat,
        });
        const res = (await this.client.chat.completions.create({
            ...body,
            response_format: resolvedResponseFormat,
        }));
        return this.extractResultFromStream(res, jsonMode);
    }
    async extractResultFromStream(stream, jsonMode, streaming) {
        const result = new ReadableStream({
            start: async (controller) => {
                try {
                    let text = "";
                    let refusal = "";
                    const toolCalls = [];
                    let model;
                    for await (const chunk of stream) {
                        const choice = chunk.choices?.[0];
                        if (!model) {
                            model = chunk.model;
                            controller.enqueue({
                                delta: {
                                    json: {
                                        model,
                                    },
                                },
                            });
                        }
                        if (choice?.delta.tool_calls?.length) {
                            for (const call of choice.delta.tool_calls) {
                                if (this.supportsToolStreaming && call.index !== undefined) {
                                    handleToolCallDelta(toolCalls, call);
                                }
                                else {
                                    handleCompleteToolCall(toolCalls, call);
                                }
                            }
                        }
                        if (choice?.delta.content) {
                            text += choice.delta.content;
                            if (!jsonMode) {
                                controller.enqueue({
                                    delta: {
                                        text: {
                                            text: choice.delta.content,
                                        },
                                    },
                                });
                            }
                        }
                        if (choice?.delta.refusal) {
                            refusal += choice.delta.refusal;
                            if (!jsonMode) {
                                controller.enqueue({
                                    delta: {
                                        text: { text: choice.delta.refusal },
                                    },
                                });
                            }
                        }
                        if (chunk.usage) {
                            controller.enqueue({
                                delta: {
                                    json: {
                                        usage: {
                                            inputTokens: chunk.usage.prompt_tokens,
                                            outputTokens: chunk.usage.completion_tokens,
                                        },
                                    },
                                },
                            });
                        }
                    }
                    text = text || refusal;
                    if (jsonMode && text) {
                        controller.enqueue({
                            delta: {
                                json: {
                                    json: (0, core_1.safeParseJSON)(text),
                                },
                            },
                        });
                    }
                    if (toolCalls.length) {
                        controller.enqueue({
                            delta: {
                                json: {
                                    toolCalls: toolCalls.map(({ args, ...c }) => ({
                                        ...c,
                                        function: { ...c.function, arguments: args ? (0, core_1.safeParseJSON)(args) : {} },
                                    })),
                                },
                            },
                        });
                    }
                    controller.close();
                }
                catch (error) {
                    controller.error(error);
                }
            },
        });
        return streaming ? result : await (0, stream_utils_js_1.agentResponseStreamToObject)(result);
    }
}
exports.OpenAIChatModel = OpenAIChatModel;
// Create role mapper for OpenAI (uses standard mapping)
const mapRole = (0, core_1.createRoleMapper)(core_1.STANDARD_ROLE_MAP);
/**
 * @hidden
 */
async function contentsFromInputMessages(messages) {
    return messages.map((i) => ({
        role: mapRole(i.role),
        content: typeof i.content === "string"
            ? i.content
            : i.content
                ?.map((c) => {
                if (c.type === "text") {
                    return { type: "text", text: c.text };
                }
                if (c.type === "image_url") {
                    return {
                        type: "image_url",
                        image_url: { url: c.url },
                    };
                }
            })
                .filter(type_utils_js_1.isNonNullable),
        tool_calls: i.toolCalls?.map((i) => ({
            ...i,
            function: {
                ...i.function,
                arguments: JSON.stringify(i.function.arguments),
            },
        })),
        tool_call_id: i.toolCallId,
        name: i.name,
    }));
}
/**
 * @hidden
 */
function toolsFromInputTools(tools, options) {
    return tools?.length
        ? tools.map((i) => {
            const parameters = i.function.parameters;
            if (options?.addTypeToEmptyParameters && Object.keys(parameters).length === 0) {
                parameters.type = "object";
            }
            return {
                type: "function",
                function: {
                    name: i.function.name,
                    description: i.function.description,
                    parameters,
                },
            };
        })
        : undefined;
}
/**
 * @hidden
 */
function jsonSchemaToOpenAIJsonSchema(schema) {
    if (schema?.type === "object") {
        const { required, properties } = schema;
        return {
            ...schema,
            properties: Object.fromEntries(Object.entries(properties).map(([key, value]) => {
                const valueSchema = jsonSchemaToOpenAIJsonSchema(value);
                // NOTE: All fields must be required https://platform.openai.com/docs/guides/structured-outputs/all-fields-must-be-required
                return [
                    key,
                    required?.includes(key) ? valueSchema : { anyOf: [valueSchema, { type: ["null"] }] },
                ];
            })),
            required: Object.keys(properties),
        };
    }
    if (schema?.type === "array") {
        const { items } = schema;
        return {
            ...schema,
            items: jsonSchemaToOpenAIJsonSchema(items),
        };
    }
    return schema;
}
function handleToolCallDelta(toolCalls, call) {
    toolCalls[call.index] ??= {
        id: call.id || (0, uuid_1.v7)(),
        type: "function",
        function: { name: "", arguments: {} },
        args: "",
    };
    const c = toolCalls[call.index];
    if (!c)
        throw new Error("Tool call not found");
    if (call.type)
        c.type = call.type;
    c.function.name = c.function.name + (call.function?.name || "");
    c.args = c.args.concat(call.function?.arguments || "");
}
function handleCompleteToolCall(toolCalls, call) {
    toolCalls.push({
        id: call.id || (0, uuid_1.v7)(),
        type: "function",
        function: {
            name: call.function?.name || "",
            arguments: (0, core_1.safeParseJSON)(call.function?.arguments || "{}"),
        },
        args: call.function?.arguments || "",
    });
}
// safeParseJSON is now imported from @aigne/core
