import { type AgentProcessResult, ChatModel, type ChatModelInput, type ChatModelOptions, type ChatModelOutput } from "@aigne/core";
import { type PromiseOrValue } from "@aigne/core/utils/type-utils.js";
import Anthropic, { type ClientOptions } from "@anthropic-ai/sdk";
import { z } from "zod";
/**
 * Configuration options for Claude Chat Model
 */
export interface AnthropicChatModelOptions {
    /**
     * API key for Anthropic's Claude API
     *
     * If not provided, will look for ANTHROPIC_API_KEY or CLAUDE_API_KEY in environment variables
     */
    apiKey?: string;
    /**
     * Claude model to use
     *
     * Defaults to 'claude-3-7-sonnet-latest'
     */
    model?: string;
    /**
     * Additional model options to control behavior
     */
    modelOptions?: ChatModelOptions;
    /**
     * Optional client options for the Anthropic SDK
     */
    clientOptions?: Partial<ClientOptions>;
}
/**
 * @hidden
 */
export declare const claudeChatModelOptionsSchema: z.ZodObject<{
    apiKey: z.ZodOptional<z.ZodString>;
    model: z.ZodOptional<z.ZodString>;
    modelOptions: z.ZodOptional<z.ZodObject<{
        model: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        frequencyPenalty: z.ZodOptional<z.ZodNumber>;
        presencePenalty: z.ZodOptional<z.ZodNumber>;
        parallelToolCalls: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        parallelToolCalls: boolean;
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
    }, {
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        parallelToolCalls?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    apiKey?: string | undefined;
    model?: string | undefined;
    modelOptions?: {
        parallelToolCalls: boolean;
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
    } | undefined;
}, {
    apiKey?: string | undefined;
    model?: string | undefined;
    modelOptions?: {
        model?: string | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        parallelToolCalls?: boolean | undefined;
    } | undefined;
}>;
/**
 * Implementation of the ChatModel interface for Anthropic's Claude API
 *
 * This model provides access to Claude's capabilities including:
 * - Text generation
 * - Tool use
 * - JSON structured output
 *
 * Default model: 'claude-3-7-sonnet-latest'
 *
 * @example
 * Here's how to create and use a Claude chat model:
 * {@includeCode ../test/anthropic-chat-model.test.ts#example-anthropic-chat-model}
 *
 * @example
 * Here's an example with streaming response:
 * {@includeCode ../test/anthropic-chat-model.test.ts#example-anthropic-chat-model-streaming-async-generator}
 */
export declare class AnthropicChatModel extends ChatModel {
    options?: AnthropicChatModelOptions | undefined;
    constructor(options?: AnthropicChatModelOptions | undefined);
    protected apiKeyEnvName: string;
    /**
     * @hidden
     */
    protected _client?: Anthropic;
    get client(): Anthropic;
    get modelOptions(): ChatModelOptions | undefined;
    get credential(): {
        apiKey: string | undefined;
        model: string;
    };
    private getMaxTokens;
    /**
     * Process the input using Claude's chat model
     * @param input - The input to process
     * @returns The processed output from the model
     */
    process(input: ChatModelInput): PromiseOrValue<AgentProcessResult<ChatModelOutput>>;
    private ajv;
    private _process;
    private extractResultFromAnthropicStream;
    private requestStructuredOutput;
}
