import type { AgentResponse, AgentResponseStream, ChatModelOptions, InvokeOptions, Message } from "@aigne/core";
import type { OpenAIChatModelOptions } from "@aigne/openai";
/**
 * Options for invoking an agent through the BaseClient.
 * Extends the standard AgentInvokeOptions with client-specific options.
 */
export interface BaseClientInvokeOptions extends InvokeOptions {
    /**
     * Additional fetch API options to customize the HTTP request.
     * These options will be merged with the default options used by the client.
     */
    fetchOptions?: Partial<RequestInit> & {
        maxRetries?: number;
    };
}
export interface BaseClientOptions {
    url: string;
    apiKey?: string;
    model?: string;
    modelOptions?: ChatModelOptions;
    clientOptions?: OpenAIChatModelOptions["clientOptions"];
}
/**
 * Http client for interacting with a remote AIGNE server.
 * BaseClient provides a client-side interface that matches the AIGNE API,
 * allowing applications to invoke agents and receive responses from a remote AIGNE instance.
 *
 * @example
 * Here's a simple example of how to use AIGNEClient:
 * {@includeCode ../../test/http-client/http-client.test.ts#example-aigne-client-simple}
 *
 * @example
 * Here's an example of how to use AIGNEClient with streaming response:
 * {@includeCode ../../test/http-client/http-client.test.ts#example-aigne-client-streaming}
 */
export declare class BaseClient {
    options: BaseClientOptions;
    /**
     * Creates a new AIGNEClient instance.
     *
     * @param options - Configuration options for connecting to the AIGNE server
     */
    constructor(options: BaseClientOptions);
    /**
     * Invokes an agent in non-streaming mode and returns the complete response.
     *
     * @param agent - Name of the agent to invoke
     * @param input - Input message for the agent
     * @param options - Options with streaming mode explicitly set to false or omitted
     * @returns The complete agent response
     *
     * @example
     * Here's a simple example of how to use AIGNEClient:
     * {@includeCode ../../test/http-client/http-client.test.ts#example-aigne-client-simple}
     */
    __invoke<I extends Message, O extends Message>(agent?: string, input?: string | I, options?: BaseClientInvokeOptions & {
        streaming?: false;
    }): Promise<O>;
    /**
     * Invokes an agent with streaming mode enabled and returns a stream of response chunks.
     *
     * @param agent - Name of the agent to invoke
     * @param input - Input message for the agent
     * @param options - Options with streaming mode explicitly set to true
     * @returns A stream of agent response chunks
     *
     * @example
     * Here's an example of how to use AIGNEClient with streaming response:
     * {@includeCode ../../test/http-client/http-client.test.ts#example-aigne-client-streaming}
     */
    __invoke<I extends Message, O extends Message>(agent?: string, input?: string | I, options?: BaseClientInvokeOptions & {
        streaming: true;
    }): Promise<AgentResponseStream<O>>;
    /**
     * Invokes an agent with the given input and options.
     *
     * @param agent - Name of the agent to invoke
     * @param input - Input message for the agent
     * @param options - Options for the invocation
     * @returns Either a complete response or a response stream depending on the streaming option
     */
    __invoke<I extends Message, O extends Message>(agent?: string, input?: string | I, options?: BaseClientInvokeOptions): Promise<AgentResponse<O>>;
    /**
     * Enhanced fetch method that handles error responses from the AIGNE server.
     * This method wraps the standard fetch API to provide better error handling and reporting.
     *
     * @param args - Standard fetch API arguments (url and options)
     * @returns A Response object if the request was successful
     * @throws Error with detailed information if the request failed
     *
     * @private
     */
    fetch(url: string, init?: BaseClientInvokeOptions["fetchOptions"]): Promise<Response>;
}
