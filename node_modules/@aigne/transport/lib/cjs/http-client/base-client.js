"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseClient = void 0;
const event_stream_js_1 = require("@aigne/core/utils/event-stream.js");
const logger_js_1 = require("@aigne/core/utils/logger.js");
const type_utils_js_1 = require("@aigne/core/utils/type-utils.js");
const constants_js_1 = require("../constants.js");
const DEFAULT_MAX_RECONNECTS = 3;
/**
 * Http client for interacting with a remote AIGNE server.
 * BaseClient provides a client-side interface that matches the AIGNE API,
 * allowing applications to invoke agents and receive responses from a remote AIGNE instance.
 *
 * @example
 * Here's a simple example of how to use AIGNEClient:
 * {@includeCode ../../test/http-client/http-client.test.ts#example-aigne-client-simple}
 *
 * @example
 * Here's an example of how to use AIGNEClient with streaming response:
 * {@includeCode ../../test/http-client/http-client.test.ts#example-aigne-client-streaming}
 */
class BaseClient {
    options;
    /**
     * Creates a new AIGNEClient instance.
     *
     * @param options - Configuration options for connecting to the AIGNE server
     */
    constructor(options) {
        this.options = options;
    }
    async __invoke(agent, input, options) {
        const model = this.options.modelOptions?.model ?? this.options.model;
        const headers = {
            "Content-Type": "application/json",
            ...options?.fetchOptions?.headers,
        };
        if (this.options?.apiKey) {
            headers["Authorization"] = `Bearer ${this.options.apiKey}`;
        }
        const body = {
            model,
            input,
            agent: agent ?? constants_js_1.ChatModelName,
            options: options && {
                ...(0, type_utils_js_1.omit)(options, "context"),
                userContext: { ...options.userContext },
                memories: [...(options.memories ?? [])],
                modelOptions: this.options.modelOptions,
                clientOptions: this.options.clientOptions,
            },
        };
        const response = await this.fetch(this.options.url, {
            ...options?.fetchOptions,
            method: "POST",
            headers: headers,
            body: JSON.stringify(body),
        });
        // For non-streaming responses, simply parse the JSON response and return it
        if (!options?.streaming) {
            return await response.json();
        }
        // For streaming responses, set up the streaming pipeline
        const stream = response.body;
        if (!stream)
            throw new Error("Response body is not a stream");
        // Process the stream through a series of transforms:
        // 1. Convert bytes to text
        // 2. Parse SSE format into structured events
        // 3. Convert events into a standardized agent response stream
        return stream
            .pipeThrough(new TextDecoderStream())
            .pipeThrough(new event_stream_js_1.EventStreamParser())
            .pipeThrough(new event_stream_js_1.AgentResponseStreamParser());
    }
    /**
     * Enhanced fetch method that handles error responses from the AIGNE server.
     * This method wraps the standard fetch API to provide better error handling and reporting.
     *
     * @param args - Standard fetch API arguments (url and options)
     * @returns A Response object if the request was successful
     * @throws Error with detailed information if the request failed
     *
     * @private
     */
    async fetch(url, init) {
        const { default: retry } = await Promise.resolve().then(() => __importStar(require("p-retry")));
        const result = await retry(() => globalThis.fetch(url, init), {
            retries: init?.maxRetries ?? DEFAULT_MAX_RECONNECTS,
            onFailedAttempt: (error) => {
                logger_js_1.logger.warn("Retrying fetch request due to error:", error);
            },
        });
        if (!result.ok) {
            let message;
            let resultText;
            let type;
            try {
                const text = await result.text();
                const json = (0, type_utils_js_1.tryOrThrow)(() => JSON.parse(text));
                resultText = text;
                message = json?.error?.message;
                type = json?.error?.type;
            }
            catch {
                // ignore
            }
            if (message) {
                const e = new Error(message);
                if (type)
                    e.type = type;
                throw e;
            }
            throw new Error(`Failed to fetch url ${url} with status ${result.status}: ${resultText}`);
        }
        return result;
    }
}
exports.BaseClient = BaseClient;
