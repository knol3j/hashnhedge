import { IncomingMessage, ServerResponse } from "node:http";
import type { AIGNE, InvokeOptions, UserContext } from "@aigne/core";
import { z } from "zod";
/**
 * Schema for validating agent invocation payloads.
 * Defines the expected structure for requests to invoke an agent.
 *
 * @hidden
 */
export declare const invokePayloadSchema: z.ZodObject<{
    agent: z.ZodString;
    input: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    options: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodObject<{
        streaming: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>, boolean | undefined, boolean | null | undefined>;
        returnProgressChunks: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>, boolean | undefined, boolean | null | undefined>;
        userContext: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>, Record<string, unknown> | undefined, Record<string, unknown> | null | undefined>;
        memories: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            content: z.ZodType<object, z.ZodTypeDef, object>;
        }, "strip", z.ZodTypeAny, {
            content: object;
        }, {
            content: object;
        }>, "many">>>, {
            content: object;
        }[] | undefined, {
            content: object;
        }[] | null | undefined>;
    }, "strip", z.ZodTypeAny, {
        streaming?: boolean | undefined;
        returnProgressChunks?: boolean | undefined;
        userContext?: Record<string, unknown> | undefined;
        memories?: {
            content: object;
        }[] | undefined;
    }, {
        streaming?: boolean | null | undefined;
        returnProgressChunks?: boolean | null | undefined;
        userContext?: Record<string, unknown> | null | undefined;
        memories?: {
            content: object;
        }[] | null | undefined;
    }>>>, {
        streaming?: boolean | undefined;
        returnProgressChunks?: boolean | undefined;
        userContext?: Record<string, unknown> | undefined;
        memories?: {
            content: object;
        }[] | undefined;
    } | undefined, {
        streaming?: boolean | null | undefined;
        returnProgressChunks?: boolean | null | undefined;
        userContext?: Record<string, unknown> | null | undefined;
        memories?: {
            content: object;
        }[] | null | undefined;
    } | null | undefined>;
}, "strip", z.ZodTypeAny, {
    input: Record<string, unknown>;
    agent: string;
    options?: {
        streaming?: boolean | undefined;
        returnProgressChunks?: boolean | undefined;
        userContext?: Record<string, unknown> | undefined;
        memories?: {
            content: object;
        }[] | undefined;
    } | undefined;
}, {
    input: Record<string, unknown>;
    agent: string;
    options?: {
        streaming?: boolean | null | undefined;
        returnProgressChunks?: boolean | null | undefined;
        userContext?: Record<string, unknown> | null | undefined;
        memories?: {
            content: object;
        }[] | null | undefined;
    } | null | undefined;
}>;
/**
 * Configuration options for the AIGNEHTTPServer.
 * These options control various aspects of server behavior including
 * request parsing, payload limits, and response handling.
 */
export interface AIGNEHTTPServerOptions {
    /**
     * Maximum body size for incoming HTTP requests.
     * This controls the upper limit of request payload size when parsing raw HTTP requests.
     * Only used when working with Node.js IncomingMessage objects that don't already have
     * a pre-parsed body property (e.g., when not using Express middleware).
     *
     * @default "4mb"
     */
    maximumBodySize?: string;
}
export interface AIGNEHTTPServerInvokeOptions<U extends UserContext = UserContext> extends Pick<InvokeOptions<U>, "returnProgressChunks" | "userContext" | "memories" | "hooks"> {
}
/**
 * AIGNEHTTPServer provides HTTP API access to AIGNE capabilities.
 * It handles requests to invoke agents, manages response streaming,
 * and supports multiple HTTP server frameworks including Node.js http,
 * Express, and Fetch API compatible environments.
 *
 * @example
 * Here's a simple example of how to use AIGNEServer with express:
 * {@includeCode ../../test/http-server/http-server.test.ts#example-aigne-server-express}
 *
 * @example
 * Here's an example of how to use AIGNEServer with Hono:
 * {@includeCode ../../test/http-server/http-server.test.ts#example-aigne-server-hono}
 */
export declare class AIGNEHTTPServer {
    aigne: AIGNE;
    options?: AIGNEHTTPServerOptions | undefined;
    /**
     * Creates a new AIGNEServer instance.
     *
     * @param aigne - The AIGNE instance that will process agent invocations
     * @param options - Configuration options for the server
     */
    constructor(aigne: AIGNE, options?: AIGNEHTTPServerOptions | undefined);
    /**
     * Invokes an agent with the provided input and returns a standard web Response.
     * This method serves as the primary API endpoint for agent invocation.
     *
     * The request can be provided in various formats to support different integration scenarios:
     * - As a pre-parsed JavaScript object
     * - As a Fetch API Request instance (for modern web frameworks)
     * - As a Node.js IncomingMessage (for Express, Fastify, etc.)
     *
     * @param request - The agent invocation request in any supported format
     * @returns A web standard Response object that can be returned directly in frameworks
     *          like Hono, Next.js, or any Fetch API compatible environment
     *
     * @example
     * Here's a simple example of how to use AIGNEServer with Hono:
     * {@includeCode ../../test/http-server/http-server.test.ts#example-aigne-server-hono}
     */
    invoke(request: Record<string, unknown> | Request | IncomingMessage, options?: ServerResponse | AIGNEHTTPServerInvokeOptions): Promise<Response>;
    /**
     * Invokes an agent with the provided input and streams the response to a Node.js ServerResponse.
     * This overload is specifically designed for Node.js HTTP server environments.
     *
     * The method handles both regular JSON responses and streaming Server-Sent Events (SSE)
     * responses based on the options specified in the request.
     *
     * @param request - The agent invocation request in any supported format
     * @param response - The Node.js ServerResponse object to write the response to
     *
     * @example
     * Here's a simple example of how to use AIGNEServer with express:
     * {@includeCode ../../test/http-server/http-server.test.ts#example-aigne-server-express}
     */
    invoke(request: Record<string, unknown> | Request | IncomingMessage, response: ServerResponse, options?: AIGNEHTTPServerInvokeOptions): Promise<void>;
    /**
     * Internal method that handles the core logic of processing an agent invocation request.
     * Validates the request payload, finds the requested agent, and processes the invocation
     * with either streaming or non-streaming response handling.
     *
     * @param request - The parsed or raw request to process
     * @param options - Additional options for the invocation, such as user context and memories
     * @returns A standard Response object with the invocation result
     * @private
     */
    _invoke(request: Record<string, unknown> | Request | IncomingMessage, options?: AIGNEHTTPServerInvokeOptions): Promise<Response>;
    /**
     * Prepares and normalizes the input from various request types.
     * Handles different request formats (Node.js IncomingMessage, Fetch API Request,
     * or already parsed object) and extracts the JSON payload.
     *
     * @param request - The request object in any supported format
     * @returns The normalized payload as a JavaScript object
     * @private
     */
    _prepareInput(request: Record<string, unknown> | Request | IncomingMessage): Promise<Record<string, unknown>>;
    /**
     * Writes a web standard Response object to a Node.js ServerResponse.
     * Handles streaming responses and error conditions appropriately.
     *
     * @param response - The web standard Response object to write
     * @param res - The Node.js ServerResponse to write to
     * @private
     */
    _writeResponse(response: Response, res: ServerResponse): Promise<void>;
}
