import { Agent, type AgentInvokeOptions, type AgentOptions, type AgentProcessResult, type AgentResponse, type AgentResponseStream, type Message } from "@aigne/core";
import type { PromiseOrValue } from "@aigne/core/utils/type-utils.js";
import type { AIGNEHTTPClient } from "./client.js";
export interface ClientAgentOptions<I extends Message = Message, O extends Message = Message> extends Partial<AgentOptions<I, O>> {
    name: string;
}
export declare class ClientAgent<I extends Message = Message, O extends Message = Message> extends Agent<I, O> {
    client: AIGNEHTTPClient;
    tag: string;
    constructor(client: AIGNEHTTPClient, options: ClientAgentOptions<I, O>);
    invoke(input: I, options?: Partial<AgentInvokeOptions> & {
        streaming?: false;
    }): Promise<O>;
    invoke(input: I, options: Partial<AgentInvokeOptions> & {
        streaming: true;
    }): Promise<AgentResponseStream<O>>;
    invoke(input: I, options?: Partial<AgentInvokeOptions>): Promise<AgentResponse<O>>;
    process(_input: I, _options: AgentInvokeOptions): PromiseOrValue<AgentProcessResult<O>>;
}
