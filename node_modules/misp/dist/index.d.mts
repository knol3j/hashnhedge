import https from 'https';

type SearchReturnFormat = 'json' | 'xml' | 'csv' | 'text' | 'stix' | 'stix2' | 'hashes' | 'cache' | 'count' | 'netfilter' | 'opendata' | 'openioc' | 'rpz' | 'snort' | 'suricata' | 'text' | 'yara' | 'yara-json';

type ThreatLevel = '1' | '2' | '3' | '4';
type EventRestSearchParams = {
    page?: number;
    limit?: number;
    value?: string;
    type?: string;
    category?: AttributeCategory;
    org?: string;
    tags?: string[];
    event_tags?: string[];
    searchall?: string;
    from?: string;
    to?: string;
    last?: number | string;
    eventid?: string;
    withAttachments?: boolean;
    sharinggroup?: string[];
    metadata?: boolean;
    uuid?: string;
    publish_timestamp?: string;
    timestamp?: string;
    published?: boolean;
    enforceWarningList?: boolean;
    sgReferenceOnly?: boolean;
    requested_attributes?: string[];
    includeContext?: boolean;
    headerless?: boolean;
    includeWarninglistHits?: boolean;
    attackGalaxy?: string;
    to_ids?: boolean;
    deleted?: boolean;
    excludeLocalTags?: boolean;
    date?: string;
    includeSightingdb?: boolean;
    tag?: string;
    object_relation?: string;
    threat_level_id?: ThreatLevel;
    returnFormat?: SearchReturnFormat;
};
type EventIndexParams = {
    page?: number;
    limit?: number;
    sort?: string;
    direction?: 'asc' | 'desc';
    minimal?: boolean;
    attribute?: string;
    eventid?: string;
    datefrom?: string;
    dateuntil?: string;
    org?: string;
    eventinfo?: string;
    tag?: string;
    tags?: string[];
    distribution?: '0' | '1' | '2' | '3' | '4' | '5';
    sharinggroup?: string;
    analysis?: '0' | '1' | '2';
    threatlevel?: ThreatLevel;
    email?: string;
    hasproposal?: '0' | '1';
    timestamp?: string;
    publish_timestamp?: string;
    searchDatefrom?: string;
    searchDateuntil?: string;
};

type AttributeCategory = 'Internal reference' | 'Targeting data' | 'Antivirus detection' | 'Payload delivery' | 'Artifacts dropped' | 'Payload installation' | 'Persistence mechanism' | 'Network activity' | 'Payload type' | 'Attribution' | 'External analysis' | 'Financial fraud' | 'Support Tool' | 'Social network' | 'Person' | 'Other';
type AttributeContext = 'type' | 'category';
type AttributePercentage = 0 | 1;
type AttributeRestSearchFilter = {
    page?: number;
    limit?: number;
    value?: string;
    value1?: string;
    value2?: string;
    type?: string;
    category?: AttributeCategory;
    org?: string;
    tags?: string[];
    from?: string;
    to?: string;
    last?: number | string;
    eventid?: string;
    withAttachments?: boolean;
    uuid?: string;
    publish_timestamp?: string;
    published?: boolean;
    timestamp?: string;
    attribute_timestamp?: string;
    enforceWarningList?: boolean;
    to_ids?: boolean;
    deleted?: boolean;
    event_timestamp?: string;
    threat_level_id?: ThreatLevel;
    eventinfo?: string;
    sharinggroup?: string[];
    decayingModel?: string;
    score?: string;
    first_seen?: string;
    last_seen?: string;
    includeEventUuid?: boolean;
    includeEventTags?: boolean;
    includeProposals?: boolean;
    requested_attributes?: string[];
    includeContext?: boolean;
    headerless?: boolean;
    includeWarninglistHits?: boolean;
    attackGalaxy?: string;
    object_relation?: string;
    includeSightings?: boolean;
    includeCorrelations?: boolean;
    modelOverrides?: any;
    includeDecayScore?: boolean;
    includeFullModel?: boolean;
    excludeDecayed?: boolean;
    returnFormat?: SearchReturnFormat;
};

type WorkerType = 'default' | 'email' | 'scheduler' | 'cache' | 'prio' | 'update';

type PullTechnique = 'full' | 'incremental' | 'pull_relevant_clusters';
type PushTechnique = 'full' | 'incremental';
type ImportServerParams = {
    name: string;
    url: string;
    uuid: string;
    authkey: string;
    Organization: {
        name: string;
    };
};

type FeedCacheScope = 'all' | 'csv' | 'freetext';

type AnalystDataType = 'Note' | 'Opinion' | 'Relationship';
type AnalystObjectType = 'Attribute' | 'Event' | 'EventReport' | 'GalaxyCluster' | 'Galaxy' | 'Object' | 'Note' | 'Opinion' | 'Relationship' | 'Organisation' | 'SharingGroup';

type ModelName = 'AdminSetting' | 'Allowedlist' | 'AttachmentScan' | 'Attribute' | 'AttributeTag' | 'AuditLog' | 'AuthKey' | 'Bruteforce' | 'Cerebrate' | 'Community' | 'CorrelationExclusion' | 'Correlation' | 'Dashboard' | 'DecayingModelMapping' | 'DecayingModel' | 'EventBlocklist' | 'EventDelegation' | 'EventGraph' | 'EventLock' | 'Event' | 'EventReport' | 'EventTag' | 'FavouriteTag' | 'Feed' | 'FuzzyCorrelateSsdeep' | 'GalaxyClusterBlocklist' | 'GalaxyCluster' | 'GalaxyClusterRelation' | 'GalaxyClusterRelationTag' | 'GalaxyElement' | 'Galaxy' | 'Inbox' | 'Job' | 'Log' | 'MispObject' | 'Module' | 'News' | 'NoticelistEntry' | 'Noticelist' | 'NotificationLog' | 'ObjectReference' | 'ObjectRelationship' | 'ObjectTemplateElement' | 'ObjectTemplate' | 'Organisation' | 'OrgBlocklist' | 'Post' | 'Regexp' | 'RestClientHistory' | 'Role' | 'Server' | 'ShadowAttribute' | 'SharingGroupOrg' | 'SharingGroup' | 'SharingGroupServer' | 'SightingdbOrg' | 'Sightingdb' | 'Sighting' | 'TagCollection' | 'TagCollectionTag' | 'Tag' | 'Task' | 'TaxonomyEntry' | 'Taxonomy' | 'TaxonomyPredicate' | 'TemplateElementAttribute' | 'TemplateElementFile' | 'TemplateElement' | 'TemplateElementText' | 'Template' | 'TemplateTag' | 'Thread' | 'ThreatLevel' | 'User' | 'UserSetting' | 'WarninglistEntry' | 'Warninglist' | 'WarninglistType';
type LogActionType = 'accept' | 'accept_delegation' | 'acceptRegistrations' | 'add' | 'admin_email' | 'attachTags' | 'auth' | 'auth_fail' | 'blocklisted' | 'captureRelations' | 'change_pw' | 'delete' | 'disable' | 'discard' | 'discardRegistrations' | 'edit' | 'email' | 'enable' | 'enrichment' | 'error' | 'export' | 'fetchEvent' | 'file_upload' | 'galaxy' | 'include_formula' | 'login' | 'login_fail' | 'logout' | 'merge' | 'pruneUpdateLogs' | 'publish' | 'publish_sightings' | 'publish alert' | 'pull' | 'purge_events' | 'push' | 'registration' | 'registration_error' | 'remove_dead_workers' | 'request' | 'request_delegation' | 'reset_auth_key' | 'send_mail' | 'security' | 'serverSettingsEdit' | 'tag' | 'undelete' | 'update' | 'update_database' | 'update_db_worker' | 'upgrade_24' | 'upload_sample' | 'version_warning' | 'warning' | 'wipe_default';
type LogSearchParams = {
    page?: number;
    limit?: number;
    id?: string;
    title?: string;
    created?: string | string[];
    model?: ModelName;
    model_id?: string;
    action?: LogActionType;
    user_id?: string;
    change?: string;
    email?: string;
    org?: string;
    description?: string;
    ip?: string;
};

type AuthKeySearchParams = {
    page?: number;
    limit?: number;
    id?: string;
    uuid?: string;
    authkey_start?: string;
    authkey_end?: string;
    created?: string;
    expiration?: string;
    read_only?: boolean;
    user_id?: string;
    comment?: string;
    allowed_ips?: string;
    last_used?: string;
};

type WarningListSearchParams = {
    value?: string;
    enabled?: boolean;
};
type WarningListToggleParams = {
    id?: string | string[];
    name?: string | string[];
    enabled: boolean;
};

type ObjectSearchParams = {
    page?: number;
    limit?: number;
    quickFilter?: string;
    searchall?: string;
    timestamp?: string;
    object_name?: string;
    object_template_uuid?: string;
    object_template_version?: string;
    eventid?: string;
    eventinfo?: string;
    ignore?: boolean;
    from?: string;
    to?: string;
    date?: string;
    tags?: string[];
    last?: string | number;
    event_timestamp?: string;
    publish_timestamp?: string;
    org?: string;
    uuid?: string;
    value?: string;
    type?: string;
    category?: AttributeCategory;
    object_relation?: string;
    attribute_timestamp?: string;
    first_seen?: string;
    last_seen?: string;
    comment?: string;
    to_ids?: boolean;
    published?: boolean;
    deleted?: boolean;
    withAttachments?: boolean;
    enforceWarninglist?: boolean;
    includeAllTags?: boolean;
    includeEventUuid?: boolean;
    include_event_uuid?: boolean;
    includeEventTags?: boolean;
    includeProposals?: boolean;
    includeWarninglistHits?: boolean;
    includeContext?: boolean;
    includeSightings?: boolean;
    includeSightingdb?: boolean;
    includeCorrelations?: boolean;
    includeDecayStore?: boolean;
    includeFullModel?: boolean;
    allow_proposal_blocking?: boolean;
    metadata?: boolean;
    attackGalaxy?: string;
    excludeDecayed?: boolean;
    decayingModel?: string;
    modelOverrides?: {
        lifetime?: number;
        decay_speed?: number;
        threshold?: number;
        default_base_score?: number;
        base_score_config?: any;
    };
    score?: string;
    returnFormat?: 'json';
};

type GalaxyClusterContext = 'all' | 'default' | 'org' | 'deleted';
type GalaxyClusterSearchFilter = {
    context: GalaxyClusterContext;
    searchall?: string;
};

type UserSettingName = 'publish_alert_filter' | 'dashboard_access' | 'dashboard' | 'homepage' | 'default_restsearch_parameters' | 'tag_numerical_value_override' | 'event_index_hide_columns';
type UserSettingSearchFilter = {
    id?: string;
    setting?: UserSettingName;
    user_id?: string;
};

declare class Resource {
    protected readonly client: Client;
    constructor(client: Client);
}

declare class Events extends Resource {
    list(): Promise<any>;
    restSearch(params?: EventRestSearchParams): Promise<any>;
    index(params?: EventIndexParams): Promise<any>;
    get(id: string): Promise<any>;
    add(data: any): Promise<any>;
    edit(id: string, data: any): Promise<any>;
    delete(id: string): Promise<any>;
    publish(id: string): Promise<any>;
    unpublish(id: string): Promise<any>;
    addTag(id: string, tag: string, local: boolean): Promise<any>;
    removeTag(id: string, tag: string): Promise<any>;
}

declare class Attributes extends Resource {
    list(): Promise<any>;
    restSearch(params?: AttributeRestSearchFilter): Promise<any>;
    get(id: string): Promise<any>;
    add(eventId: string, data: any): Promise<any>;
    edit(id: string, data: any): Promise<any>;
    delete(id: string): Promise<any>;
    restore(id: string): Promise<any>;
    addTag(id: string, tag: string, local: boolean): Promise<any>;
    removeTag(id: string, tag: string): Promise<any>;
    attributeStatistics(context: AttributeContext, percentage: AttributePercentage): Promise<any>;
    describeTypes(): Promise<any>;
}

declare class Users extends Resource {
    list(): Promise<any>;
    get(id: string): Promise<any>;
    add(data: any): Promise<any>;
    edit(id: string, data: any): Promise<any>;
    resetPassword(id: string, firstTimeReset?: '0' | '1'): Promise<any>;
    deleteTOTP(id: string): Promise<any>;
    delete(id: string): Promise<any>;
}

declare class Organisations extends Resource {
    list(): Promise<any>;
    get(id: string): Promise<any>;
    add(data: any): Promise<any>;
    edit(id: string, data: any): Promise<any>;
    delete(id: string): Promise<any>;
}

declare class Servers extends Resource {
    list(): Promise<any>;
    add(data: any): Promise<any>;
    edit(id: string, data: any): Promise<any>;
    delete(id: string): Promise<any>;
    pull(id: string, technique: PullTechnique): Promise<any>;
    push(id: string, technique: PushTechnique): Promise<any>;
    version(): Promise<any>;
    pymispVersion(): Promise<any>;
    settings(): Promise<any>;
    update(): Promise<any>;
    cache(): Promise<any>;
    createSync(): Promise<any>;
    uuid(): Promise<any>;
    setting(name: string): Promise<any>;
    editSetting(name: string, value: any): Promise<any>;
    import(params: ImportServerParams): Promise<any>;
}

declare class Workers extends Resource {
    list(): Promise<any>;
    start(type: WorkerType): Promise<any>;
    stop(pid: number): Promise<any>;
    killAll(): Promise<any>;
    restart(): Promise<any>;
    restartDead(): Promise<any>;
}

declare class Feeds extends Resource {
    list(): Promise<any>;
    get(id: string): Promise<any>;
    add(data: any): Promise<any>;
    edit(id: string, data: any): Promise<any>;
    enable(id: string): Promise<any>;
    disable(id: string): Promise<any>;
    cache(scope: FeedCacheScope): Promise<any>;
    fetch(id: string): Promise<any>;
    fetchAll(): Promise<any>;
}

declare class Tags extends Resource {
    list(): Promise<any>;
    search(term: string): Promise<any>;
    get(id: string): Promise<any>;
    add(data: any): Promise<any>;
    edit(id: string, data: any): Promise<any>;
    delete(id: string): Promise<any>;
}

declare class AnalystData extends Resource {
    list(type: AnalystDataType): Promise<any>;
    get(type: AnalystDataType, id: string): Promise<any>;
    add(type: AnalystDataType, objectId: string, objectType: AnalystObjectType, data: any): Promise<any>;
    edit(type: AnalystDataType, id: string, data: any): Promise<any>;
    delete(type: AnalystDataType, id: string): Promise<any>;
}

declare class Logs extends Resource {
    search(params?: LogSearchParams): Promise<any>;
}

declare class AuthKeys extends Resource {
    list(): Promise<any>;
    search(params?: AuthKeySearchParams): Promise<any>;
    get(id: string): Promise<any>;
    add(data: any): Promise<any>;
    edit(id: string, data: any): Promise<any>;
    delete(id: string): Promise<any>;
}

declare class Sightings extends Resource {
    list(eventId: string): Promise<any>;
    add(values: string[], timestamp?: string, filters?: AttributeRestSearchFilter): Promise<any>;
    addAttribute(attributeId: string): Promise<any>;
    delete(sightingId: string): Promise<any>;
}

declare class Warninglists extends Resource {
    list(): Promise<any>;
    search(params: WarningListSearchParams): Promise<any>;
    get(id: string): Promise<any>;
    toggle(params: WarningListToggleParams): Promise<any>;
    check(values: string[]): Promise<any>;
    update(): Promise<any>;
}

declare class Noticelists extends Resource {
    list(): Promise<any>;
    get(id: string): Promise<any>;
    toggle(id: string): Promise<any>;
    update(): Promise<any>;
}

declare class Objects extends Resource {
    search(params: ObjectSearchParams): Promise<any>;
    add(eventId: string, objectTemplateId: string, data: any): Promise<any>;
    get(id: string): Promise<any>;
    delete(id: string): Promise<any>;
}

declare class Taxonomies extends Resource {
    list(): Promise<any>;
    get(id: string): Promise<any>;
    enable(id: string): Promise<any>;
    disable(id: string): Promise<any>;
    update(): Promise<any>;
    getWithTags(id: string): Promise<any>;
    export(id: string): Promise<any>;
}

declare class GalaxyClusters extends Resource {
    list(galaxyId: string): Promise<any>;
    search(galaxyId: string, params: GalaxyClusterSearchFilter): Promise<any>;
    get(clusterId: string): Promise<any>;
    add(galaxyId: string, data: any): Promise<any>;
    edit(clusterId: string, data: any): Promise<any>;
    publish(clusterId: string): Promise<any>;
    unpublish(clusterId: string): Promise<any>;
    delete(clusterId: string): Promise<any>;
    restore(clusterId: string): Promise<any>;
}

declare class Galaxies extends Resource {
    list(): Promise<any>;
    search(value: string): Promise<any>;
    get(id: string): Promise<any>;
    import(data: any): Promise<any>;
    export(id: string, data: any): Promise<any>;
    delete(id: string): Promise<any>;
    attach(attachTargetId: string, attachTargetType: string, local: boolean, data: any): Promise<any>;
}

declare class SharingGroups extends Resource {
    list(): Promise<any>;
    get(id: string): Promise<any>;
    add(data: any): Promise<any>;
    edit(id: string, data: any): Promise<any>;
    delete(id: string): Promise<any>;
    addOrganisation(sharingGroupId: string, organisationId: string): Promise<any>;
    removeOrganisation(sharingGroupId: string, organisationId: string): Promise<any>;
    addServer(sharingGroupId: string, serverId: string): Promise<any>;
    removeServer(sharingGroupId: string, serverId: string): Promise<any>;
}

declare class UserSettings extends Resource {
    list(): Promise<any>;
    search(params: UserSettingSearchFilter): Promise<any>;
    get(id: string): Promise<any>;
    delete(id: string): Promise<any>;
    getForUser(userId: string, name: string): Promise<any>;
    setForUser(userId: string, name: UserSettingName, data: any): Promise<any>;
}

declare class EventReports extends Resource {
    list(): Promise<any>;
    get(id: string): Promise<any>;
    add(eventId: string, data: any): Promise<any>;
    edit(id: string, data: any): Promise<any>;
    delete(id: string): Promise<any>;
    hardDelete(id: string, hardDelete: '0' | '1'): Promise<any>;
    restore(id: string): Promise<any>;
    import(eventId: string, url: string): Promise<any>;
}

declare class Client {
    private readonly instanceUrl;
    private readonly apiKey;
    private readonly httpsAgent;
    private readonly client;
    readonly events: Events;
    readonly objects: Objects;
    readonly attributes: Attributes;
    readonly users: Users;
    readonly organisations: Organisations;
    readonly servers: Servers;
    readonly workers: Workers;
    readonly feeds: Feeds;
    readonly tags: Tags;
    readonly analystData: AnalystData;
    readonly logs: Logs;
    readonly authKeys: AuthKeys;
    readonly sightings: Sightings;
    readonly warninglists: Warninglists;
    readonly noticelists: Noticelists;
    readonly taxonomies: Taxonomies;
    readonly galaxies: Galaxies;
    readonly galaxyClusters: GalaxyClusters;
    readonly sharingGroups: SharingGroups;
    readonly userSettings: UserSettings;
    readonly eventReports: EventReports;
    constructor(instanceUrl: string, apiKey: string, httpsAgent?: https.Agent);
    get(path: string): Promise<any>;
    post(path: string, data?: any): Promise<any>;
    delete(path: string): Promise<any>;
    put(path: string, data: any): Promise<any>;
}

export { type AnalystDataType, type AnalystObjectType, type AttributeCategory, type AttributeContext, type AttributePercentage, type AttributeRestSearchFilter, type AuthKeySearchParams, Client, type EventIndexParams, type EventRestSearchParams, type FeedCacheScope, type GalaxyClusterContext, type GalaxyClusterSearchFilter, type ImportServerParams, type LogActionType, type LogSearchParams, type ModelName, type ObjectSearchParams, type PullTechnique, type PushTechnique, type SearchReturnFormat, type ThreatLevel, type UserSettingName, type UserSettingSearchFilter, type WarningListSearchParams, type WarningListToggleParams, type WorkerType };
