var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/client.ts
import axios from "axios";
import https from "https";

// src/resources/resource.ts
var Resource = class {
  constructor(client) {
    this.client = client;
  }
};

// src/resources/events.ts
var Events = class extends Resource {
  // * List events
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/events`);
    });
  }
  // * (restSearch) Search events
  restSearch() {
    return __async(this, arguments, function* (params = {}) {
      return this.client.post(`/events/restSearch`, params);
    });
  }
  // * (index) Search events
  index() {
    return __async(this, arguments, function* (params = {}) {
      return this.client.post(`/events/index`, params);
    });
  }
  // * Get event by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/events/view/${id}`);
    });
  }
  // * Add event
  // TODO: Add type for data
  add(data) {
    return __async(this, null, function* () {
      return this.client.post(`/events/add`, data);
    });
  }
  // * Edit event
  // TODO: Add type for data
  edit(id, data) {
    return __async(this, null, function* () {
      return this.client.put(`/events/edit/${id}`, data);
    });
  }
  // * Delete event
  delete(id) {
    return __async(this, null, function* () {
      return this.client.delete(`/events/delete/${id}`);
    });
  }
  // * Publish event
  publish(id) {
    return __async(this, null, function* () {
      return this.client.post(`/events/publish/${id}`);
    });
  }
  // * Unpublish event
  unpublish(id) {
    return __async(this, null, function* () {
      return this.client.post(`/events/unpublish/${id}`);
    });
  }
  // * Add event tag
  addTag(id, tag, local) {
    return __async(this, null, function* () {
      return this.client.post(`/events/addTag/${id}/${tag}/local:${local}`);
    });
  }
  // * Remove event tag
  removeTag(id, tag) {
    return __async(this, null, function* () {
      return this.client.post(`/events/removeTag/${id}/${tag}`);
    });
  }
};

// src/resources/attributes.ts
var Attributes = class extends Resource {
  // * List attributes
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/attributes`);
    });
  }
  // * (restSearch) Search attributes
  restSearch() {
    return __async(this, arguments, function* (params = {}) {
      return this.client.post(`/attributes/restSearch`, params);
    });
  }
  // * Get attribute by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/attributes/view/${id}`);
    });
  }
  // * Add attribute
  add(eventId, data) {
    return __async(this, null, function* () {
      return this.client.post(`/attributes/add/${eventId}`, data);
    });
  }
  // * Edit attribute
  edit(id, data) {
    return __async(this, null, function* () {
      return this.client.put(`/attributes/edit/${id}`, data);
    });
  }
  // * Delete attribute
  delete(id) {
    return __async(this, null, function* () {
      return this.client.delete(`/attributes/delete/${id}`);
    });
  }
  // * Restore an attribute
  restore(id) {
    return __async(this, null, function* () {
      return this.client.post(`/attributes/restore/${id}`);
    });
  }
  // * Add a tag to an attribute
  addTag(id, tag, local) {
    return __async(this, null, function* () {
      return this.client.post(`/attributes/addTag/${id}/${tag}/local:${local}`);
    });
  }
  // * Remove a tag from an attribute
  removeTag(id, tag) {
    return __async(this, null, function* () {
      return this.client.post(`/attributes/removeTag/${id}/${tag}`);
    });
  }
  // * Get count of attributes per category
  attributeStatistics(context, percentage) {
    return __async(this, null, function* () {
      return this.client.get(`/attributes/attributeStatistics/${context}/${percentage}`);
    });
  }
  // * Get a list of all attribute types
  describeTypes() {
    return __async(this, null, function* () {
      return this.client.get(`/attributes/describeTypes`);
    });
  }
};

// src/resources/users.ts
var Users = class extends Resource {
  // * List users
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/admin/users`);
    });
  }
  // * Get user by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/admin/users/view/${id}`);
    });
  }
  // * Add user
  // TODO: Add type for data
  add(data) {
    return __async(this, null, function* () {
      return this.client.post(`/admin/users/add`, data);
    });
  }
  // * Edit user
  // TODO: Add type for data
  edit(id, data) {
    return __async(this, null, function* () {
      return this.client.post(`/admin/users/edit/${id}`, data);
    });
  }
  // * Reset user password
  resetPassword(id, firstTimeReset = "0") {
    return __async(this, null, function* () {
      return this.client.post(`/users/initiatePasswordReset/${id}/${firstTimeReset}`);
    });
  }
  // * Delete user TOTP
  deleteTOTP(id) {
    return __async(this, null, function* () {
      return this.client.post(`/users/totp_delete/${id}`);
    });
  }
  // * Delete user
  delete(id) {
    return __async(this, null, function* () {
      return this.client.delete(`/admin/users/delete/${id}`);
    });
  }
};

// src/resources/organisations.ts
var Organisations = class extends Resource {
  // * List organisations
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/organisations`);
    });
  }
  // * Get organisation by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/organisations/view/${id}`);
    });
  }
  // * Add organisation
  // TODO: Add type for data
  add(data) {
    return __async(this, null, function* () {
      return this.client.post(`/admin/organisations/add`, data);
    });
  }
  // * Edit organisation
  // TODO: Add type for data
  edit(id, data) {
    return __async(this, null, function* () {
      return this.client.post(`/admin/organisations/edit/${id}`, data);
    });
  }
  // * Delete organisation
  delete(id) {
    return __async(this, null, function* () {
      return this.client.delete(`/admin/organisations/delete/${id}`);
    });
  }
};

// src/resources/servers.ts
var Servers = class extends Resource {
  // * List servers
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/servers`);
    });
  }
  // * Add server
  // TODO: Add type
  add(data) {
    return __async(this, null, function* () {
      return this.client.post(`/servers/add`, data);
    });
  }
  // * Edit server
  // TODO: Add type
  edit(id, data) {
    return __async(this, null, function* () {
      return this.client.put(`/servers/edit/${id}`, data);
    });
  }
  // * Delete server
  delete(id) {
    return __async(this, null, function* () {
      return this.client.delete(`/servers/delete/${id}`);
    });
  }
  // * Pull server
  pull(id, technique) {
    return __async(this, null, function* () {
      return this.client.get(`/servers/pull/${id}/${technique}`);
    });
  }
  // * Push server
  push(id, technique) {
    return __async(this, null, function* () {
      return this.client.post(`/servers/push/${id}/${technique}`);
    });
  }
  // * Get current instance version
  version() {
    return __async(this, null, function* () {
      return this.client.get(`/servers/getVersion`);
    });
  }
  // * Get current instance PyMISP version
  pymispVersion() {
    return __async(this, null, function* () {
      return this.client.get(`/servers/getPyMISPVersion`);
    });
  }
  // * Get current instance settings and diagnostics
  settings() {
    return __async(this, null, function* () {
      return this.client.get(`/servers/serverSettings`);
    });
  }
  // * Update server
  update() {
    return __async(this, null, function* () {
      return this.client.post(`/servers/update`);
    });
  }
  // * Cache server
  cache() {
    return __async(this, null, function* () {
      return this.client.post(`/servers/cache`);
    });
  }
  // * Create sync
  createSync() {
    return __async(this, null, function* () {
      return this.client.post(`/servers/createSync`);
    });
  }
  // * Get current instance UUID
  uuid() {
    return __async(this, null, function* () {
      return this.client.get(`/servers/getInstanceUUID`);
    });
  }
  // * Get server setting by name
  setting(name) {
    return __async(this, null, function* () {
      return this.client.get(`/servers/getSetting/${name}`);
    });
  }
  // * Edit server setting
  editSetting(name, value) {
    return __async(this, null, function* () {
      return this.client.post(`/servers/serverSettingsEdit/${name}`, { value });
    });
  }
  // * Import server
  import(params) {
    return __async(this, null, function* () {
      return this.client.post(`/servers/import`, params);
    });
  }
};

// src/resources/workers.ts
var Workers = class extends Resource {
  // * Get workers
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/servers/getWorkers`);
    });
  }
  // * Start worker
  start(type) {
    return __async(this, null, function* () {
      return this.client.post(`/servers/startWorker/${type}`);
    });
  }
  // * Stop worker
  stop(pid) {
    return __async(this, null, function* () {
      return this.client.post(`/servers/stopWorker/${pid}`);
    });
  }
  // * Kill all workers
  killAll() {
    return __async(this, null, function* () {
      return this.client.post(`/servers/killAllWorkers`);
    });
  }
  // * Restart workers
  restart() {
    return __async(this, null, function* () {
      return this.client.post(`/servers/restartWorkers`);
    });
  }
  // * Restart dead workers
  restartDead() {
    return __async(this, null, function* () {
      return this.client.post(`/servers/restartDeadWorkers`);
    });
  }
};

// src/resources/feeds.ts
var Feeds = class extends Resource {
  // * List feeds
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/feeds`);
    });
  }
  // * Get feed by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/feeds/${id}`);
    });
  }
  // * Add feed
  // TODO: Add type for data
  add(data) {
    return __async(this, null, function* () {
      return this.client.post(`/feeds/add`, data);
    });
  }
  // * Edit feed
  // TODO: Add type for data
  edit(id, data) {
    return __async(this, null, function* () {
      return this.client.put(`/feeds/edit/${id}`, data);
    });
  }
  // * Enable feed
  enable(id) {
    return __async(this, null, function* () {
      return this.client.post(`/feeds/enable/${id}`);
    });
  }
  // * Disable feed
  disable(id) {
    return __async(this, null, function* () {
      return this.client.post(`/feeds/disable/${id}`);
    });
  }
  // * Cache feeds
  cache(scope) {
    return __async(this, null, function* () {
      return this.client.post(`/feeds/cacheFeeds/${scope}`);
    });
  }
  // * Fetch from feed by id
  fetch(id) {
    return __async(this, null, function* () {
      return this.client.post(`/feeds/fetchFromFeed/${id}`);
    });
  }
  // * Fetch from all feeds
  fetchAll() {
    return __async(this, null, function* () {
      return this.client.post(`/feeds/fetchFromAllFeeds`);
    });
  }
};

// src/resources/tags.ts
var Tags = class extends Resource {
  // * List tags
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/tags`);
    });
  }
  // * Search tags
  search(term) {
    return __async(this, null, function* () {
      return this.client.post(`/tags/search/${encodeURIComponent(term)}`);
    });
  }
  // * Get tag by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/tags/view/${id}`);
    });
  }
  // * Add tag
  add(data) {
    return __async(this, null, function* () {
      return this.client.post(`/tags/add`, data);
    });
  }
  // * Edit tag
  edit(id, data) {
    return __async(this, null, function* () {
      return this.client.put(`/tags/edit/${id}`, data);
    });
  }
  // * Delete tag
  delete(id) {
    return __async(this, null, function* () {
      return this.client.post(`/tags/delete/${id}`);
    });
  }
};

// src/resources/analyst-data.ts
var AnalystData = class extends Resource {
  // * List analyst data
  list(type) {
    return __async(this, null, function* () {
      return this.client.get(`/analystData/index/${type}`);
    });
  }
  // * Get analyst data by id
  get(type, id) {
    return __async(this, null, function* () {
      return this.client.get(`/analystData/view/${type}/${id}`);
    });
  }
  // * Add analyst data
  // TODO: Add type for data
  add(type, objectId, objectType, data) {
    return __async(this, null, function* () {
      return this.client.post(`/analystData/add/${type}/${objectId}/${objectType}`, data);
    });
  }
  // * Edit analyst data
  // TODO: Add type for data
  edit(type, id, data) {
    return __async(this, null, function* () {
      return this.client.post(`/analystData/edit/${type}/${id}`, data);
    });
  }
  // * Delete analyst data
  delete(type, id) {
    return __async(this, null, function* () {
      return this.client.delete(`/analystData/delete/${type}/${id}`);
    });
  }
};

// src/resources/logs.ts
var Logs = class extends Resource {
  // * Search logs
  search() {
    return __async(this, arguments, function* (params = {}) {
      return this.client.post(`/admin/logs`, params);
    });
  }
};

// src/resources/auth-keys.ts
var AuthKeys = class extends Resource {
  // * List auth keys
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/auth_keys`);
    });
  }
  // * Search auth keys
  search() {
    return __async(this, arguments, function* (params = {}) {
      return this.client.post(`/auth_keys`, params);
    });
  }
  // * Get auth key by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/auth_keys/view/${id}`);
    });
  }
  // * Add auth key
  add(data) {
    return __async(this, null, function* () {
      return this.client.post(`/auth_keys/add`, data);
    });
  }
  // * Edit auth key
  edit(id, data) {
    return __async(this, null, function* () {
      return this.client.post(`/auth_keys/edit/${id}`, data);
    });
  }
  // * Delete auth key
  delete(id) {
    return __async(this, null, function* () {
      return this.client.delete(`/auth_keys/delete/${id}`);
    });
  }
};

// src/resources/sightings.ts
var Sightings = class extends Resource {
  // * Get sightings by event id
  list(eventId) {
    return __async(this, null, function* () {
      return this.client.get(`/sightings/index/${eventId}`);
    });
  }
  // * Add sightings of a list of values
  add(values, timestamp, filters) {
    return __async(this, null, function* () {
      return this.client.post(`/sightings/add`, { values, timestamp, filters });
    });
  }
  // * Add sighting of an attribute
  addAttribute(attributeId) {
    return __async(this, null, function* () {
      return this.client.post(`/sightings/add/${attributeId}`);
    });
  }
  // * Delete sighting
  delete(sightingId) {
    return __async(this, null, function* () {
      return this.client.post(`/sightings/delete/${sightingId}`);
    });
  }
};

// src/resources/warninglists.ts
var Warninglists = class extends Resource {
  // * Get warning lists
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/warninglists`);
    });
  }
  // * Search warning lists
  search(params) {
    return __async(this, null, function* () {
      return this.client.post(`/warninglists`, params);
    });
  }
  // * Get warning list by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/warninglists/view/${id}`);
    });
  }
  // * Enable or disable warning lists
  toggle(params) {
    return __async(this, null, function* () {
      return this.client.post(`/warninglists/toggleEnable`, params);
    });
  }
  // * Check if a list of values are in a warning list
  check(values) {
    return __async(this, null, function* () {
      return this.client.post(`/warninglists/checkValue`, values);
    });
  }
  // * Update warning lists
  update() {
    return __async(this, null, function* () {
      return this.client.post(`/warninglists/update`);
    });
  }
};

// src/resources/noticelists.ts
var Noticelists = class extends Resource {
  // * Get noticelists
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/noticelists`);
    });
  }
  // * Get noticelist by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/noticelists/view/${id}`);
    });
  }
  // * Enable or disable noticelist
  toggle(id) {
    return __async(this, null, function* () {
      return this.client.post(`/noticelists/toggleEnable/${id}`);
    });
  }
  // * Update noticelists
  update() {
    return __async(this, null, function* () {
      return this.client.post(`/noticelists/update`);
    });
  }
};

// src/resources/objects.ts
var Objects = class extends Resource {
  // * List objects
  search(params) {
    return __async(this, null, function* () {
      return this.client.post(`/objects/restsearch`, params);
    });
  }
  // * Add object to an event
  add(eventId, objectTemplateId, data) {
    return __async(this, null, function* () {
      return this.client.post(`/objects/add/${eventId}/${objectTemplateId}`, data);
    });
  }
  // * Get object by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/objects/view/${id}`);
    });
  }
  // * Delete object
  delete(id) {
    return __async(this, null, function* () {
      return this.client.delete(`/objects/delete/${id}`);
    });
  }
};

// src/resources/taxonomies.ts
var Taxonomies = class extends Resource {
  // * Get taxonomies
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/taxonomies`);
    });
  }
  // * Get taxonomy by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/taxonomies/view/${id}`);
    });
  }
  // * Enable taxonomy
  enable(id) {
    return __async(this, null, function* () {
      return this.client.post(`/taxonomies/enable/${id}`);
    });
  }
  // * Disable taxonomy
  disable(id) {
    return __async(this, null, function* () {
      return this.client.post(`/taxonomies/disable/${id}`);
    });
  }
  // * Update taxonomies
  update() {
    return __async(this, null, function* () {
      return this.client.post(`/taxonomies/update`);
    });
  }
  // * Get a taxonomy extended with tags used in events and attributes
  getWithTags(id) {
    return __async(this, null, function* () {
      return this.client.get(`/taxonomies/taxonomy_tags/${id}`);
    });
  }
  // * Export taxonomy
  export(id) {
    return __async(this, null, function* () {
      return this.client.get(`/taxonomies/export/${id}`);
    });
  }
};

// src/resources/galaxy-clusters.ts
var GalaxyClusters = class extends Resource {
  // * List galaxy clusters
  list(galaxyId) {
    return __async(this, null, function* () {
      return this.client.get(`/galaxy_clusters/index/${galaxyId}`);
    });
  }
  // * Search galaxy clusters
  search(galaxyId, params) {
    return __async(this, null, function* () {
      return this.client.post(`/galaxy_clusters/index/${galaxyId}`, params);
    });
  }
  // * Get galaxy cluster by id
  get(clusterId) {
    return __async(this, null, function* () {
      return this.client.get(`/galaxy_clusters/view/${clusterId}`);
    });
  }
  // * Add galaxy cluster
  add(galaxyId, data) {
    return __async(this, null, function* () {
      return this.client.post(`/galaxy_clusters/add/${galaxyId}`, data);
    });
  }
  // * Edit galaxy cluster
  edit(clusterId, data) {
    return __async(this, null, function* () {
      return this.client.post(`/galaxy_clusters/edit/${clusterId}`, data);
    });
  }
  // * Publish galaxy cluster
  publish(clusterId) {
    return __async(this, null, function* () {
      return this.client.post(`/galaxy_clusters/publish/${clusterId}`);
    });
  }
  // * Unpublish galaxy cluster
  unpublish(clusterId) {
    return __async(this, null, function* () {
      return this.client.post(`/galaxy_clusters/unpublish/${clusterId}`);
    });
  }
  // * Delete galaxy cluster
  delete(clusterId) {
    return __async(this, null, function* () {
      return this.client.post(`/galaxy_clusters/delete/${clusterId}`);
    });
  }
  // * Restore galaxy cluster
  restore(clusterId) {
    return __async(this, null, function* () {
      return this.client.post(`/galaxy_clusters/restore/${clusterId}`);
    });
  }
};

// src/resources/galaxies.ts
var Galaxies = class extends Resource {
  // * List galaxies
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/galaxies`);
    });
  }
  // * Search galaxies
  search(value) {
    return __async(this, null, function* () {
      return this.client.post(`/galaxies/search`, { value });
    });
  }
  // * Get galaxy by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/galaxies/view/${id}`);
    });
  }
  // * Import galaxy cluster
  // TODO: Add type for data
  import(data) {
    return __async(this, null, function* () {
      return this.client.post(`/galaxies/import`, data);
    });
  }
  // * Export galaxy cluster
  // TODO: Add type for data
  export(id, data) {
    return __async(this, null, function* () {
      return this.client.post(`/galaxies/export/${id}`, data);
    });
  }
  // * Delete galaxy
  delete(id) {
    return __async(this, null, function* () {
      return this.client.delete(`/galaxies/delete/${id}`);
    });
  }
  // * Attach galaxy cluster tag to entity
  // TODO: Add type for data
  attach(attachTargetId, attachTargetType, local, data) {
    return __async(this, null, function* () {
      return this.client.post(`/galaxies/attachCluster/${attachTargetId}/${attachTargetType}/local:${local}`, data);
    });
  }
};

// src/resources/sharing-groups.ts
var SharingGroups = class extends Resource {
  // * Get sharing groups
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/sharing_groups`);
    });
  }
  // * Get sharing group by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/sharing_groups/view/${id}`);
    });
  }
  // * Add sharing group
  // TODO: Add type for data
  add(data) {
    return __async(this, null, function* () {
      return this.client.post(`/sharing_groups/add`, data);
    });
  }
  // * Edit sharing group
  // TODO: Add type for data
  edit(id, data) {
    return __async(this, null, function* () {
      return this.client.post(`/sharing_groups/edit/${id}`, data);
    });
  }
  // * Delete sharing group
  delete(id) {
    return __async(this, null, function* () {
      return this.client.delete(`/sharing_groups/delete/${id}`);
    });
  }
  // * Add an organisation to a sharing group
  addOrganisation(sharingGroupId, organisationId) {
    return __async(this, null, function* () {
      return this.client.post(`/sharing_groups/addOrg/${sharingGroupId}/${organisationId}`);
    });
  }
  // * Remove an organisation from a sharing group
  removeOrganisation(sharingGroupId, organisationId) {
    return __async(this, null, function* () {
      return this.client.post(`/sharing_groups/removeOrg/${sharingGroupId}/${organisationId}`);
    });
  }
  // * Add a server to a sharing group
  addServer(sharingGroupId, serverId) {
    return __async(this, null, function* () {
      return this.client.post(`/sharing_groups/addServer/${sharingGroupId}/${serverId}`);
    });
  }
  // * Remove a server from a sharing group
  removeServer(sharingGroupId, serverId) {
    return __async(this, null, function* () {
      return this.client.post(`/sharing_groups/removeServer/${sharingGroupId}/${serverId}`);
    });
  }
};

// src/resources/user-settings.ts
var UserSettings = class extends Resource {
  // * Get user settings
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/user_settings`);
    });
  }
  // * Search user settings
  search(params) {
    return __async(this, null, function* () {
      return this.client.post(`/user_settings`, params);
    });
  }
  // * Get user setting by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/user_settings/view/${id}`);
    });
  }
  // * Delete user setting by id
  delete(id) {
    return __async(this, null, function* () {
      return this.client.delete(`/user_settings/${id}`);
    });
  }
  // * Get user setting for specific user
  getForUser(userId, name) {
    return __async(this, null, function* () {
      return this.client.get(`/user_settings/getSetting/${userId}/${name}`);
    });
  }
  // * Set user setting for specific user
  setForUser(userId, name, data) {
    return __async(this, null, function* () {
      return this.client.post(`/user_settings/setSetting/${userId}/${name}`, data);
    });
  }
};

// src/resources/event-reports.ts
var EventReports = class extends Resource {
  // * List event reports
  list() {
    return __async(this, null, function* () {
      return this.client.get(`/eventReports/index`);
    });
  }
  // * Get event report by id
  get(id) {
    return __async(this, null, function* () {
      return this.client.get(`/eventReports/view/${id}`);
    });
  }
  // * Add event report
  add(eventId, data) {
    return __async(this, null, function* () {
      return this.client.post(`/eventReports/add/${eventId}`, data);
    });
  }
  // * Edit event report
  edit(id, data) {
    return __async(this, null, function* () {
      return this.client.post(`/eventReports/edit/${id}`, data);
    });
  }
  // * Delete event report
  delete(id) {
    return __async(this, null, function* () {
      return this.client.post(`/eventReports/delete/${id}`);
    });
  }
  // * Hard delete event report
  hardDelete(id, hardDelete) {
    return __async(this, null, function* () {
      return this.client.post(`/eventReports/delete/${id}/${hardDelete}`);
    });
  }
  // * Restore event report
  restore(id) {
    return __async(this, null, function* () {
      return this.client.post(`/eventReports/restore/${id}`);
    });
  }
  // * Import event report from URL
  import(eventId, url) {
    return __async(this, null, function* () {
      return this.client.post(`/eventReports/importReportFromUrl/${eventId}`, { url });
    });
  }
};

// src/client.ts
var Client = class {
  constructor(instanceUrl, apiKey, httpsAgent = new https.Agent({ rejectUnauthorized: false })) {
    this.instanceUrl = instanceUrl;
    this.apiKey = apiKey;
    this.httpsAgent = httpsAgent;
    this.events = new Events(this);
    this.objects = new Objects(this);
    this.attributes = new Attributes(this);
    this.users = new Users(this);
    this.organisations = new Organisations(this);
    this.servers = new Servers(this);
    this.workers = new Workers(this);
    this.feeds = new Feeds(this);
    this.tags = new Tags(this);
    this.analystData = new AnalystData(this);
    this.logs = new Logs(this);
    this.authKeys = new AuthKeys(this);
    this.sightings = new Sightings(this);
    this.warninglists = new Warninglists(this);
    this.noticelists = new Noticelists(this);
    this.taxonomies = new Taxonomies(this);
    this.galaxies = new Galaxies(this);
    this.galaxyClusters = new GalaxyClusters(this);
    this.sharingGroups = new SharingGroups(this);
    this.userSettings = new UserSettings(this);
    this.eventReports = new EventReports(this);
    this.instanceUrl = instanceUrl;
    this.apiKey = apiKey;
    this.client = axios.create({
      baseURL: this.instanceUrl,
      httpsAgent: this.httpsAgent,
      headers: {
        "Authorization": `${this.apiKey}`,
        "Accept": "application/json"
      }
    });
  }
  get(path) {
    return __async(this, null, function* () {
      const response = yield this.client.get(path);
      return response.data;
    });
  }
  post(_0) {
    return __async(this, arguments, function* (path, data = {}) {
      const response = yield this.client.post(path, data);
      return response.data;
    });
  }
  delete(path) {
    return __async(this, null, function* () {
      const response = yield this.client.delete(path);
      return response.data;
    });
  }
  put(path, data) {
    return __async(this, null, function* () {
      const response = yield this.client.put(path, data);
      return response.data;
    });
  }
};
export {
  Client
};
//# sourceMappingURL=index.mjs.map