import sha3 from 'js-sha3';
import { toUint8Array } from '@ocap/util';
import { encode } from '../encode';
/**
 * Sha3 support with different hash length
 *
 * @class Sha3Hasher
 */
class Sha3Hasher {
    constructor() {
        [224, 256, 384, 512].forEach((x) => {
            const name = `hash${x}`;
            /* eslint-disable @typescript-eslint/ban-ts-comment */
            // @ts-ignore
            const hasher = sha3[`sha3_${x}`];
            const hashFn = (input, round) => {
                if (round === 1) {
                    return hasher(input);
                }
                return hashFn(hasher(input), round - 1);
            };
            this[name] = (data, round = 1, encoding = 'hex') => {
                let input = data;
                try {
                    input = toUint8Array(data);
                }
                catch (err) {
                    // Do nothing
                }
                const res = hashFn(input, round);
                return encode(`0x${res}`, encoding);
            };
        });
    }
}
export default new Sha3Hasher();
export { Sha3Hasher };
