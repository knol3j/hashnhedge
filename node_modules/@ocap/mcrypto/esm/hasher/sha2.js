/* eslint-disable @typescript-eslint/ban-ts-comment */
import { toUint8Array } from '@ocap/util';
import { sha224, sha256, sha384, sha512 } from 'hash.js';
import { encode } from '../encode';
const hashFns = {
    sha224,
    sha256,
    sha384,
    sha512,
};
/**
 * Sha2 support with different hash length
 *
 * @class
 */
class Sha2Hasher {
    constructor() {
        [224, 256, 384, 512].forEach((x) => {
            const name = `hash${x}`;
            // @ts-ignore
            const hasher = hashFns[`sha${x}`];
            const hashFn = (input, round) => {
                let inputBytes = input;
                try {
                    inputBytes = toUint8Array(input);
                }
                catch (err) {
                    // Do nothing
                }
                if (round === 1) {
                    return `0x${hasher().update(inputBytes).digest('hex')}`;
                }
                return hashFn(hashFn(inputBytes, 1), round - 1);
            };
            this[name] = (data, round = 2, encoding = 'hex') => {
                const res = hashFn(data, round);
                return encode(res, encoding);
            };
        });
    }
}
export default new Sha2Hasher();
export { Sha2Hasher };
