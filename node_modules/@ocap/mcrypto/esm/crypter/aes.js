// For browsers, may need: https://www.npmjs.com/package/crypto-browserify
import crypto from 'crypto';
import { toBuffer } from '@ocap/util';
import Crypter from '../protocols/crypter';
import SHA3 from '../hasher/sha3';
import { encode } from '../encode';
// AES-ECB-256
class AesCrypter extends Crypter {
    encrypt(message, secret, encoding = 'hex') {
        const key = SHA3.hash256(secret, 1, 'buffer');
        const cipher = crypto.createCipheriv('aes-256-ecb', key, '');
        cipher.setAutoPadding(true);
        const output = cipher.update(toBuffer(message));
        return encode(Buffer.concat([output, cipher.final()]), encoding);
    }
    decrypt(message, secret, encoding = 'hex') {
        const key = SHA3.hash256(secret, 1, 'buffer');
        const decipher = crypto.createDecipheriv('aes-256-ecb', key, '');
        decipher.setAutoPadding(true);
        const output = decipher.update(toBuffer(message));
        return encode(Buffer.concat([output, decipher.final()]), encoding);
    }
}
export default new AesCrypter();
export { AesCrypter };
