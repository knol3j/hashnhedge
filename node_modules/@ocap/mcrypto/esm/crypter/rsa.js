import crypto from 'crypto';
import { toBuffer } from '@ocap/util';
import Crypter from '../protocols/crypter';
import { encode } from '../encode';
// RSA-OAEP
class RSACrypter extends Crypter {
    genKeyPair(length = 2048) {
        return crypto.generateKeyPairSync('rsa', {
            modulusLength: length,
            publicKeyEncoding: {
                type: 'spki',
                format: 'pem',
            },
            privateKeyEncoding: {
                type: 'pkcs8',
                format: 'pem',
            },
        });
    }
    encrypt(message, key, encoding = 'hex') {
        return encode(crypto.publicEncrypt(key, toBuffer(message)), encoding);
    }
    decrypt(message, key, encoding = 'hex') {
        return encode(crypto.privateDecrypt(key, toBuffer(message)), encoding);
    }
}
export default new RSACrypter();
export { RSACrypter };
