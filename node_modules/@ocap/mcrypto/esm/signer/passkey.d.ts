import { BytesType, EncodingType, KeyPairType } from '@ocap/util';
import BaseSigner from '../protocols/signer';
/**
 * Signer implementation for passkey, based on `@simplewebauthn/server`
 * Since passkey supports only verification, we do not need to implement the sign method
 * And passkeys can used multiple algorithms, we do not need to implement the algorithm selection
 *
 * @class PasskeySigner
 */
declare class PasskeySigner extends BaseSigner {
    constructor();
    genKeyPair(encoding?: EncodingType, userSeed?: BytesType): KeyPairType;
    getPublicKey(sk: BytesType, encoding?: EncodingType): BytesType;
    sign(message: BytesType, sk: BytesType, encoding?: EncodingType): BytesType;
    /**
     * Verify if a signature is valid
     *
     * @param {string|buffer} challenge - the challenge sent to passkey, should be txHash when signing a transaction
     * @param {string|buffer} signature - signature from passkey
     * @param {string|buffer} pk - credentialPublicKey from passkey, must be parsed with `parseAuthenticatorData`
     * @returns {bool}
     */
    verify(challenge: BytesType, signature: BytesType, pk: BytesType, extra: string): Promise<boolean>;
}
declare const _default: PasskeySigner;
export default _default;
export { PasskeySigner };
