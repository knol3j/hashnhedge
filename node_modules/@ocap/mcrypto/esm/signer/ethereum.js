/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-ignore
import Account from 'eth-lib/lib/account';
// @ts-ignore
import Hash from 'eth-lib/lib/hash';
import { isHexStrict, utf8ToHex, hexToBytes } from '@ocap/util';
import { Secp256k1Signer } from './secp256k1';
/**
 * Signer implementation for secp256k1, based on `elliptic`, and ethereum compatible
 *
 * @class EthereumSigner
 */
class EthereumSigner extends Secp256k1Signer {
    constructor() {
        super();
        this.pkHasFormatPrefix = false;
    }
    ethHash(data) {
        const messageHex = isHexStrict(data) ? data : utf8ToHex(data);
        const messageBytes = hexToBytes(messageHex);
        const messageBuffer = Buffer.from(messageBytes);
        const preamble = `\x19Ethereum Signed Message:\n${messageBytes.length}`;
        const preambleBuffer = Buffer.from(preamble);
        const ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);
        return Hash.keccak256s(ethMessage);
    }
    ethSign(data, privateKey) {
        return Account.sign(data, privateKey);
    }
    ethRecover(data, signature) {
        return Account.recover(data, signature);
    }
}
export default new EthereumSigner();
export { EthereumSigner };
